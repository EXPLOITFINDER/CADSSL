<?php
/**
 * Malware Detection Patterns
 * 
 * Contains patterns and signatures for detecting various types of malware
 * in WordPress installations.
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

class CADSSL_Malware_Patterns {

    /**
     * Get patterns for detecting obfuscated code
     * 
     * @return array Array of detection patterns
     */
    public static function get_obfuscation_patterns() {
        return array(
            // Base64 encoded PHP code
            array(
                'pattern' => '/base64_decode\s*\(\s*[\'"](.*?)[\'"]\s*\)/i',
                'severity' => 'high',
                'description' => 'Base64 encoded data detected'
            ),
            // Eval with base64 decode
            array(
                'pattern' => '/eval\s*\(\s*base64_decode\s*\(/i',
                'severity' => 'critical',
                'description' => 'Execution of base64 decoded data'
            ),
            // Hex encoded strings
            array(
                'pattern' => '/\\\\x[0-9a-f]{2}\\\\x[0-9a-f]{2}\\\\x[0-9a-f]{2}/i',
                'severity' => 'medium',
                'description' => 'Hex encoded string detected'
            ),
            // Eval with concatenated strings
            array(
                'pattern' => '/eval\([\'"]\\$[a-zA-Z0-9_]+[\'"]\s*\.\s*[\'"].*?[\'"]\)/i',
                'severity' => 'high',
                'description' => 'Execution of dynamically built code'
            ),
            // Hidden iframe
            array(
                'pattern' => '/<iframe.*?style=[\'"].*?(display\s*:\s*none|height\s*:\s*0|width\s*:\s*0).*?[\'"].*?>/i',
                'severity' => 'high',
                'description' => 'Hidden iframe detected'
            ),
            // String reversal
            array(
                'pattern' => '/strrev\s*\(\s*[\'"](.*?)[\'"]\s*\)/i',
                'severity' => 'medium',
                'description' => 'String reversal function'
            ),
            // Gzinflate with base64
            array(
                'pattern' => '/gzinflate\s*\(\s*base64_decode\s*\(/i',
                'severity' => 'high',
                'description' => 'Compressed and encoded data'
            ),
            // Str_rot13
            array(
                'pattern' => '/str_rot13\s*\(\s*[\'"](.*?)[\'"]\s*\)/i',
                'severity' => 'medium',
                'description' => 'ROT13 encoded string'
            )
        );
    }

    /**
     * Get patterns for detecting malicious functions
     * 
     * @return array Array of detection patterns
     */
    public static function get_malicious_function_patterns() {
        return array(
            // Common eval patterns
            array(
                'pattern' => '/eval\s*\(((?:(?!\bfunction\b).)*?\$_(?:GET|POST|COOKIE|REQUEST|SERVER|FILES).*?)\)/is',
                'severity' => 'critical',
                'description' => 'Execution of code from user input'
            ),
            // Shell execution
            array(
                'pattern' => '/(?:system|shell_exec|exec|passthru|popen|proc_open|pcntl_exec)\s*\(((?:(?!\bfunction\b).)*?\$_(?:GET|POST|COOKIE|REQUEST|SERVER).*?)\)/is',
                'severity' => 'critical',
                'description' => 'Shell command execution from user input'
            ),
            // File operations on user input
            array(
                'pattern' => '/(?:file_get_contents|file_put_contents|fopen|readfile)\s*\(((?:(?!\bfunction\b).)*?\$_(?:GET|POST|COOKIE|REQUEST|SERVER).*?)\)/is',
                'severity' => 'high',
                'description' => 'File operations using user input'
            ),
            // Backdoor functions
            array(
                'pattern' => '/(?:assert|create_function)\s*\(\s*\$_(?:GET|POST|COOKIE|REQUEST|SERVER)\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)/i',
                'severity' => 'critical',
                'description' => 'Potential backdoor using user input'
            ),
            // Include/require with variable
            array(
                'pattern' => '/(?:include|require|include_once|require_once)\s*\(\s*\$[a-zA-Z0-9_]*\s*\)/i',
                'severity' => 'high',
                'description' => 'Dynamic file inclusion'
            ),
            // Suspicious variable variables
            array(
                'pattern' => '/\$\{\s*[\'"]\s*\$[a-zA-Z0-9_]+\s*[\'"]\s*\}/i',
                'severity' => 'high',
                'description' => 'Variable variables (potential variable manipulation)'
            ),
            // Preg_replace with /e modifier (code execution)
            array(
                'pattern' => '/preg_replace\s*\(\s*[\'"]\/.*?\/e[\'"].*?\)/i',
                'severity' => 'critical',
                'description' => 'preg_replace with /e modifier (code execution)'
            ),
            // Global variable overrides
            array(
                'pattern' => '/\$(?:GLOBALS|_SERVER|_GET|_POST|_FILES|_COOKIE|_SESSION|_REQUEST|_ENV)\s*(?:\[[\'"].*?[\'"]\])?\s*=\s*(?!array\()/i',
                'severity' => 'high',
                'description' => 'Global variable override'
            ),
        );
    }

    /**
     * Get patterns for detecting common webshells
     * 
     * @return array Array of detection patterns
     */
    public static function get_webshell_patterns() {
        return array(
            // Common webshell identifiers
            array(
                'pattern' => '/(?:c99|r57|c100|webshell|FilesMan|WSO|b374k)/i',
                'severity' => 'critical',
                'description' => 'Known webshell identifier'
            ),
            // Common webshell features
            array(
                'pattern' => '/(?:uname.*?[-a]|\/etc\/passwd|Safe Mode|Shell|Bruteforce|Network|Sec-War|Bypasser)/i',
                'severity' => 'high',
                'description' => 'Webshell feature detected'
            ),
            // File manager operations
            array(
                'pattern' => '/(?:chmod|chown|chgrp|passthru|shell_exec|phpinfo|base64_decode|edoced_46esab|FilesMan|azbruteforce)/i',
                'severity' => 'medium',
                'description' => 'Potential file manager or info gathering capability'
            ),
            // Data exfiltration
            array(
                'pattern' => '/mail\s*\(\s*\$_(?:GET|POST|COOKIE|REQUEST|SERVER)\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*,.*?\)/i',
                'severity' => 'high',
                'description' => 'Potential data exfiltration via email'
            ),
            // Common webshell UI elements
            array(
                'pattern' => '/<(?:title|h\d)>(?:\s*Shell\s*|\s*WSO\s*|\s*C99\s*|\s*r57\s*|\s*FilesMan\s*|\s*Bypass\s*|\s*b374k\s*)/i',
                'severity' => 'critical',
                'description' => 'Webshell interface detected'
            ),
            // Common shell passwords
            array(
                'pattern' => '/\$(?:pass|password|pwd|passwd)\s*=\s*[\'"](?:123456|admin|password|root|hack|shell|web)[\'"];/i',
                'severity' => 'high',
                'description' => 'Common webshell password'
            ),
            // Remote file upload
            array(
                'pattern' => '/move_uploaded_file\s*\(\s*\$_FILES\s*\[.*?\]\s*\[\s*[\'"]tmp_name[\'"]\s*\]\s*,\s*\$(?!wp_)[^\s]+\s*\)/i',
                'severity' => 'high',
                'description' => 'Suspicious file upload handler'
            ),
            // Common webshell footers/credits
            array(
                'pattern' => '/(?:Developed By|Created By|Coded By|Recoded By|Powered By).*?(?:hacker|hack|shell|security|secure|team)/i',
                'severity' => 'medium',
                'description' => 'Suspicious author credit (possible webshell)'
            ),
        );
    }

    /**
     * Get patterns for detecting SEO spam
     * 
     * @return array Array of detection patterns
     */
    public static function get_seo_spam_patterns() {
        return array(
            // Hidden links
            array(
                'pattern' => '/<a(?:\s+(?:style|class)\s*=\s*[\'"][^"\']*(?:(?:visibility\s*:\s*hidden|display\s*:\s*none|height\s*:\s*0|width\s*:\s*0|opacity\s*:\s*0|position\s*:\s*absolute)[^"\']*)[\'"]|\s+href\s*=\s*[\'"][^\'"]*(?:porn|poker|casino|viagra|pharmacy|pills|blue|ink|watches|loan|cheap|discount|buy|online|horoscope|dating|sex|babes)[^\'"]*[\'"]\s+[^>]*>.*?<\/a>)/i',
                'severity' => 'medium',
                'description' => 'Hidden or spam link'
            ),
            // Keyword stuffing
            array(
                'pattern' => '/(?:<div[^>]*style\s*=\s*[\'"][^"\']*(?:visibility\s*:\s*hidden|display\s*:\s*none)[^"\']*[\'"]\s*>|<!--)(?:.*?)(?:(?:buy|cheap|discount|online|free)|(?:cialis|viagra|casino|poker|porn|sex|dating|pills)|(?:watches|luxury|rolex|omega|loan|credit|mortgage))/is',
                'severity' => 'medium',
                'description' => 'Hidden spam content or keyword stuffing'
            ),
        );
    }

    /**
     * Get patterns for detecting malicious JavaScript
     * 
     * @return array Array of detection patterns
     */
    public static function get_malicious_js_patterns() {
        return array(
            // Suspicious JS redirects
            array(
                'pattern' => '/<script>(?:.*?)(?:document\.location|window\.location|document\.write)\s*=\s*(?:[\'"](https?:)?\/\/[^\'"]*)[\'"]/is',
                'severity' => 'high', 
                'description' => 'JavaScript redirect'
            ),
            // Obfuscated JavaScript
            array(
                'pattern' => '/<script>(?:.*?)(?:fromCharCode|unescape|eval\(|String\.fromCharCode|decodeURIComponent)/is',
                'severity' => 'high',
                'description' => 'Obfuscated JavaScript code'
            ),
            // JavaScript cookie stealing
            array(
                'pattern' => '/<script>(?:.*?)document\.cookie(?:.*?)(?:=|new Image\(\)\.src)/is',
                'severity' => 'high',
                'description' => 'Potential cookie stealing script'
            ),
            // Malicious iframe injection
            array(
                'pattern' => '/<iframe\s+src=(?:\'|")(?:https?:)?\/\/(?!www\.youtube\.com|player\.vimeo\.com|(?:.*?\.)?google\.com|(?:.*?\.)?facebook\.com)/is',
                'severity' => 'high',
                'description' => 'Suspicious iframe from unknown domain'
            ),
        );
    }

    /**
     * Get all detection patterns
     * 
     * @return array Array of all detection patterns
     */
    public static function get_all_patterns() {
        return array_merge(
            self::get_obfuscation_patterns(),
            self::get_malicious_function_patterns(),
            self::get_webshell_patterns(),
            self::get_seo_spam_patterns(),
            self::get_malicious_js_patterns()
        );
    }

    /**
     * Get suspicious PHP functions to check
     * 
     * @return array Array of suspicious PHP functions
     */
    public static function get_suspicious_functions() {
        return array(
            'high' => array(
                'eval', 'assert', 'system', 'exec', 'shell_exec', 'passthru', 
                'proc_open', 'popen', 'curl_exec', 'curl_multi_exec', 'parse_ini_file', 
                'show_source', 'preg_replace', 'create_function'
            ),
            'medium' => array(
                'base64_decode', 'base64_encode', 'gzinflate', 'gzuncompress', 
                'strrev', 'str_rot13', 'rawurldecode', 'chr', 'ini_set', 'ini_get',
                'ini_restore', 'ini_alter', 'dl', 'error_reporting'
            ),
            'low' => array(
                'error_log', 'file_get_contents', 'file_put_contents', 'unlink',
                'chmod', 'chown', 'fopen', 'fwrite', 'fputs', 'mkdir', 'rmdir',
                'rename', 'copy', 'move_uploaded_file', 'symlink', 'fileperms'
            )
        );
    }

    /**
     * Check if a file should be excluded from scanning
     * 
     * @param string $file File path to check
     * @return bool True if the file should be excluded
     */
    public static function should_exclude_file($file) {
        $exclude_patterns = array(
            // Core WP files known to be safe
            '/wp-includes/version\.php$',
            '/wp-includes/functions\.php$',
            '/wp-includes/class-wp-auth\.php$',
            '/wp-includes/formatting\.php$',
            
            // Plugin files that may have false positives
            '/code-snippets/',
            '/wp-simple-firewall/',
            '/better-wp-security/',
            '/wordfence/',
            '/wp-security-audit-log/',
            '/ithemes-security/',
            
            // Files that may have legitimate base64 content
            '/wp-content\/upgrade/',
            '/wp-content\/uploads/',
            '/wp-content\/cache/',
            
            // Binary files
            '\.jpg$', '\.jpeg$', '\.png$', '\.gif$', '\.webp$',
            '\.mp3$', '\.mp4$', '\.mov$', '\.avi$', '\.pdf$',
            '\.zip$', '\.gz$', '\.tar$', '\.bz2$', '\.7z$',
            
            // This plugin's quarantine folder
            '/CADSSL/quarantine/'
        );
        
        foreach ($exclude_patterns as $pattern) {
            if (preg_match('#' . $pattern . '#i', $file)) {
                return true;
            }
        }
        
        return false;
    }
}
