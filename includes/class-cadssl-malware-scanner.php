<?php
// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * CADSSL Malware Scanner
 * Scans WordPress files for malicious code and patterns
 */
class CADSSL_Malware_Scanner {
    /**
     * Number of files to process per scan batch - made even smaller to prevent timeouts
     */
    const BATCH_SIZE = 10; // Reduced from 20 to 10 for better stability
    
    /**
     * Maximum memory limit to set during scanning
     */
    const MEMORY_LIMIT = '384M';
    
    /**
     * Maximum execution time in seconds (5 minutes)
     */
    const MAX_EXECUTION_TIME = 300;
    
    /**
     * Files to exclude from scanning
     */
    private $excluded_files = array(
        'wp-content/uploads',
        'wp-content/cache',
        'wp-content/backup',
        'wp-content/backups',
        'wp-content/ai1wm-backups',
        'wp-content/upgrade'
    );
    
    /**
     * Initialize malware scanner
     */
    public function init() {
        // Add admin menu with static property to prevent duplicates
        static $menu_registered = false;
        if (!$menu_registered) {
            add_action('admin_menu', array($this, 'add_malware_scanner_menu'), 21);
            $menu_registered = true;
        }
        
        // Schedule weekly malware scan
        add_action('cadssl_weekly_malware_scan', array($this, 'run_automated_scan'));
        
        // Set up schedule if not already scheduled
        if (!wp_next_scheduled('cadssl_weekly_malware_scan')) {
            wp_schedule_event(time(), 'weekly', 'cadssl_weekly_malware_scan');
        }
        
        // Ajax handlers for the scanner
        add_action('wp_ajax_cadssl_start_malware_scan', array($this, 'ajax_start_scan'));
        add_action('wp_ajax_cadssl_process_malware_scan_batch', array($this, 'ajax_process_scan_batch'));
        add_action('wp_ajax_cadssl_get_scan_results', array($this, 'ajax_get_scan_results'));
        add_action('wp_ajax_cadssl_quarantine_file', array($this, 'ajax_quarantine_file'));
        add_action('wp_ajax_cadssl_restore_file', array($this, 'ajax_restore_file'));
        
        // New handlers for scan recovery and progress monitoring
        add_action('wp_ajax_cadssl_check_interrupted_scan', array($this, 'ajax_check_interrupted_scan'));
        add_action('wp_ajax_cadssl_clear_interrupted_scan', array($this, 'ajax_clear_interrupted_scan'));
        add_action('wp_ajax_cadssl_get_scan_status', array($this, 'ajax_get_scan_status'));
        add_action('wp_ajax_cadssl_scan_heartbeat', array($this, 'ajax_scan_heartbeat'));
        add_action('wp_ajax_cadssl_mark_scan_interrupted', array($this, 'ajax_mark_scan_interrupted'));
        add_action('wp_ajax_cadssl_resume_scan_from_error', array($this, 'ajax_resume_scan_from_error'));
        add_action('wp_ajax_cadssl_get_detailed_progress', array($this, 'ajax_get_detailed_progress'));
    }
    
    /**
     * Add malware scanner submenu
     */
    public function add_malware_scanner_menu() {
        // Use static property to track registered menus
        static $registered_menus = array();
        $menu_slug = 'cadssl-malware-scanner';
        
        // Only register if not already registered
        if (!isset($registered_menus[$menu_slug])) {
            // Make sure the parent menu exists
            global $submenu;
            if (!isset($submenu['cadssl-settings'])) {
                return;
            }
            
            add_submenu_page(
                'cadssl-settings',
                __('Malware Scanner', 'cadssl'),
                __('Malware Scanner', 'cadssl'),
                'manage_options',
                $menu_slug,
                array($this, 'display_malware_scanner_page')
            );
            
            $registered_menus[$menu_slug] = true;
        }
    }
    
    /**
     * Display malware scanner page
     */
    public function display_malware_scanner_page() {
        // Check if we're viewing results
        $view = isset($_GET['view']) ? sanitize_text_field($_GET['view']) : '';
        $scan_id = isset($_GET['scan_id']) ? sanitize_text_field($_GET['scan_id']) : '';
        
        if ($view === 'results' && !empty($scan_id)) {
            $this->display_scan_results_page($scan_id);
            return;
        }
        
        // Enqueue required assets
        wp_enqueue_script('cadssl-malware-scanner', CADSSL_URL . 'assets/js/malware-scanner.js', array('jquery'), CADSSL_VERSION, true);
        wp_localize_script('cadssl-malware-scanner', 'cadssl_scanner', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'start_scan_nonce' => wp_create_nonce('cadssl_start_malware_scan'),
            'process_batch_nonce' => wp_create_nonce('cadssl_process_malware_scan_batch'),
            'get_results_nonce' => wp_create_nonce('cadssl_get_scan_results'),
            'quarantine_nonce' => wp_create_nonce('cadssl_quarantine_file'),
            'restore_nonce' => wp_create_nonce('cadssl_restore_file'),
            'check_interrupted_nonce' => wp_create_nonce('cadssl_check_interrupted_scan'),
            'clear_scan_nonce' => wp_create_nonce('cadssl_clear_interrupted_scan'),
            'get_status_nonce' => wp_create_nonce('cadssl_get_scan_status'),
            'heartbeat_nonce' => wp_create_nonce('cadssl_scan_heartbeat'),
            'interrupt_nonce' => wp_create_nonce('cadssl_mark_scan_interrupted'),
            'resume_scan_nonce' => wp_create_nonce('cadssl_resume_scan'),
            'get_progress_nonce' => wp_create_nonce('cadssl_get_scan_progress'),
            'simple_scan_nonce' => wp_create_nonce('cadssl_simple_scan'),
            // Add new background scan nonces
            'start_background_scan_nonce' => wp_create_nonce('cadssl_start_background_scan'),
            'get_background_status_nonce' => wp_create_nonce('cadssl_background_scan_status'),
            'stop_background_scan_nonce' => wp_create_nonce('cadssl_stop_background_scan'),
            // Add new nonce for force releasing lock
            'force_release_lock_nonce' => wp_create_nonce('cadssl_force_release_lock'),
            'strings' => array(
                'preparing' => __('Preparing scan...', 'cadssl'),
                'scanning' => __('Scanning files...', 'cadssl'),
                'analyzing' => __('Analyzing results...', 'cadssl'),
                'completed' => __('Scan completed', 'cadssl'),
                'error_scanning' => __('Error during scanning', 'cadssl'),
                'files_scanned' => __('Files scanned:', 'cadssl'),
                'suspicious_found' => __('Suspicious files found:', 'cadssl'),
                'malware_found' => __('Malware detected:', 'cadssl'),
                'start_scan' => __('Start Scan', 'cadssl'),
                'cancel_scan' => __('Cancel Scan', 'cadssl'),
                'quarantine_file' => __('Quarantine File', 'cadssl'),
                'restore_file' => __('Restore File', 'cadssl'),
                'view_file' => __('View File', 'cadssl'),
                'quarantining' => __('Quarantining...', 'cadssl'),
                'restoring' => __('Restoring...', 'cadssl'),
                'file_quarantined' => __('File quarantined successfully', 'cadssl'),
                'file_restored' => __('File restored successfully', 'cadssl'),
                'error_quarantine' => __('Error quarantining file', 'cadssl'),
                'error_restore' => __('Error restoring file', 'cadssl'),
                'scan_interrupted' => __('Scan Interrupted', 'cadssl'),
                'scan_resume_msg' => __('A previous scan was interrupted. Would you like to resume or start a new scan?', 'cadssl'),
                'resume_scan' => __('Resume Scan', 'cadssl'),
                'new_scan' => __('Start New Scan', 'cadssl'),
                'scan_timeout' => __('Scan timed out. You can resume it later.', 'cadssl'),
                'retrying' => __('Connection issue. Retrying...', 'cadssl'),
                'processing_files' => __('Processing files', 'cadssl'),
                'connection_error' => __('Connection error. The scan was interrupted but can be resumed later.', 'cadssl'),
                'completed' => __('completed', 'cadssl'),
                'background_scan_started' => __('Background scanning has started. You can close this page and the scan will continue.', 'cadssl'),
                'background_scan_running' => __('Background scan is running...', 'cadssl'),
                'background_scan_stopped' => __('Background scan stopped.', 'cadssl'),
                'background_scan_completed' => __('Background scan completed.', 'cadssl'),
                'stop_scan' => __('Stop Scan', 'cadssl'),
                'view_results' => __('View Results', 'cadssl'),
                'time_remaining' => __('Estimated time remaining:', 'cadssl'),
                'minutes' => __('minutes', 'cadssl'),
                'seconds' => __('seconds', 'cadssl'),
                'locked_scan_title' => __('Scan Lock Detected', 'cadssl'),
                'locked_scan_message' => __('A scan lock is currently active. This could mean a scan is running in the background or a previous scan did not complete properly.', 'cadssl'),
                'force_release_lock' => __('Force Release Lock', 'cadssl'),
                'lock_released' => __('Lock released. You can now start a new scan.', 'cadssl'),
                'background_scanning' => __('Background scanning is in progress. You can close this page and the scan will continue.', 'cadssl'),
                'background_scan_explanation' => __('The scan runs via WordPress cron in the background to prevent timeouts.', 'cadssl'),
                'check_back_later' => __('You can check back later to see the results.'),
                'active' => __('ACTIVE', 'cadssl'),
                'stopped' => __('STOPPED', 'cadssl'),
                'reconnecting' => __('Reconnecting...', 'cadssl'),
                'refresh_status' => __('Refresh Status', 'cadssl'),
                'last_update' => __('Last updated:', 'cadssl')
            ),
            // Pass the background scan mode flag
            'use_background_scan' => true
        ));
        
        // Get last scan time and results
        $last_scan_time = get_option('cadssl_last_malware_scan_time', false);
        $last_scan_results = get_option('cadssl_last_malware_scan_results', array());
        
        // Get quarantined files data
        $quarantine_dir = CADSSL_PATH . 'quarantine';
        $quarantined_files = array();
        
        if (is_dir($quarantine_dir)) {
            $files = glob($quarantine_dir . '/*.json');
            foreach ($files as $file) {
                $data = json_decode(file_get_contents($file), true);
                if ($data) {
                    $quarantined_files[] = $data;
                }
            }
        }
        
        // Check for active background scan
        $active_scan = $this->get_active_background_scan();
        
        // Check if there's a scan lock
        $background_scanner = new CADSSL_Background_Scanner();
        $scan_lock = $background_scanner->get_scan_lock_info();
        
        ?>
        <div class="wrap cadssl-malware-scanner-page">
            <h1>
                <i class="dashicons dashicons-shield"></i> <?php _e('Malware Scanner', 'cadssl'); ?>
            </h1>
            
            <?php if ($scan_lock && !$active_scan): ?>
            <!-- Locked Scan Notice -->
            <div class="notice notice-warning cadssl-scan-lock-notice">
                <h3><span class="dashicons dashicons-lock"></span> <?php _e('Scan Lock Detected', 'cadssl'); ?></h3>
                <p>
                    <?php _e('A scan lock is currently active which is preventing new scans. This could mean:', 'cadssl'); ?>
                </p>
                <ul style="list-style-type: disc; padding-left: 20px;">
                    <li><?php _e('A scan is currently running through WP-Cron in the background', 'cadssl'); ?></li>
                    <li><?php _e('A previous scan did not complete properly and did not release the lock', 'cadssl'); ?></li>
                </ul>
                
                <p><strong><?php _e('Lock Information:', 'cadssl'); ?></strong></p>
                <p>
                    <?php 
                        // Format time in local timezone
                        $lock_time = get_date_from_gmt(date('Y-m-d H:i:s', $scan_lock['time']), get_option('date_format') . ' ' . get_option('time_format')); 
                        printf(__('Created: %s (%s ago)', 'cadssl'), 
                            $lock_time, 
                            human_time_diff($scan_lock['time'], time())
                        ); 
                    ?>
                    <br>
                    <?php 
                        printf(__('User ID: %s', 'cadssl'), $scan_lock['user_id']); 
                    ?>
                    <br>
                    <?php 
                        printf(__('Process ID: %s', 'cadssl'), $scan_lock['process_id']); 
                    ?>
                </p>
                
                <p>
                    <button type="button" id="cadssl-force-release-lock" class="button button-secondary">
                        <span class="dashicons dashicons-unlock"></span>
                        <?php _e('Force Release Lock', 'cadssl'); ?>
                    </button>
                    <span id="cadssl-releasing-lock" style="display: none; margin-left: 10px;">
                        <span class="spinner is-active" style="float: none; margin: 0;"></span>
                        <?php _e('Releasing lock...', 'cadssl'); ?>
                    </span>
                </p>
            </div>
            <?php endif; ?>
            
            <?php if ($active_scan): ?>
                <!-- Active Background Scan UI -->
                <div class="cadssl-admin-card cadssl-scanner-active-scan">
                    <div class="cadssl-card-header">
                        <h2><?php _e('Active Scan in Progress', 'cadssl'); ?></h2>
                    </div>
                    <div class="cadssl-card-body">
                        <div class="cadssl-scan-status-container">
                            <div class="cadssl-scan-icon">
                                <div class="cadssl-spinner-container active">
                                    <div class="cadssl-spinner" style="display:block"></div>
                                </div>
                            </div>
                            <div class="cadssl-scan-status">
                                <div id="cadssl-bg-scan-status-text" class="cadssl-scan-status-text">
                                    <?php _e('Scanning files...', 'cadssl'); ?>
                                </div>
                                <div class="cadssl-progress-bar-container">
                                    <div id="cadssl-bg-progress-bar" class="cadssl-progress-bar-outer">
                                        <div class="cadssl-progress-bar-inner" style="width: <?php echo esc_attr($active_scan['progress']); ?>%"></div>
                                    </div>
                                </div>
                                <div id="cadssl-bg-scan-stats" class="cadssl-scan-stats">
                                    <span id="cadssl-bg-scanned-count"><?php echo esc_html($active_scan['scanned_files']); ?></span> 
                                    <?php _e('files scanned', 'cadssl'); ?> |
                                    <span id="cadssl-bg-issues-count"><?php echo esc_html($active_scan['issues_count']); ?></span> 
                                    <?php _e('issues found', 'cadssl'); ?>
                                </div>
                                <div id="cadssl-bg-scan-progress-detail" class="cadssl-scan-progress-detail">
                                    <?php if (!empty($active_scan['current_file'])): ?>
                                        <?php _e('Processing file:', 'cadssl'); ?> 
                                        <?php echo esc_html($active_scan['current_file']); ?>
                                    <?php endif; ?>
                                </div>
                                <div id="cadssl-bg-time-estimate" class="cadssl-time-estimate">
                                    <?php
                                    // Calculate estimated time remaining
                                    $elapsed = time() - $active_scan['start_time'];
                                    if ($active_scan['scanned_files'] > 0 && $active_scan['progress'] > 0) {
                                        $files_per_second = $active_scan['scanned_files'] / max(1, $elapsed);
                                        $remaining_files = $active_scan['total_files'] - $active_scan['scanned_files'];
                                        $seconds_remaining = $remaining_files / max(0.1, $files_per_second);
                                        
                                        $minutes = floor($seconds_remaining / 60);
                                        $seconds = round($seconds_remaining % 60);
                                        
                                        echo esc_html__('Estimated time remaining:', 'cadssl') . ' ';
                                        if ($minutes > 0) {
                                            echo esc_html($minutes) . ' ' . esc_html__('minutes', 'cadssl') . ' ';
                                        }
                                        echo esc_html($seconds) . ' ' . esc_html__('seconds', 'cadssl');
                                    }
                                    ?>
                                </div>
                            </div>
                        </div>
                        
                        <p class="cadssl-bg-scan-info">
                            <?php _e('This scan is running in the background and will continue even if you close this page.', 'cadssl'); ?>
                        </p>
                        
                        <div class="cadssl-scan-actions">
                            <button type="button" id="cadssl-stop-bg-scan" class="button button-secondary" data-scan-id="<?php echo esc_attr($active_scan['scan_id']); ?>">
                                <span class="dashicons dashicons-no"></span>
                                <?php _e('Stop Scan', 'cadssl'); ?>
                            </button>
                            
                            <?php if ($active_scan['status'] === 'completed'): ?>
                                <a href="<?php echo esc_url(admin_url('admin.php?page=cadssl-malware-scanner&view=results&scan_id=' . $active_scan['scan_id'])); ?>" class="button button-primary">
                                    <span class="dashicons dashicons-visibility"></span>
                                    <?php _e('View Results', 'cadssl'); ?>
                                </a>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>
            <?php endif; ?>
            
            <div class="cadssl-admin-card cadssl-scanner-description">
                <div class="cadssl-card-header">
                    <h2><?php _e('About Malware Scanner', 'cadssl'); ?></h2>
                </div>
                <div class="cadssl-card-body">
                    <p><?php _e('The malware scanner looks for suspicious patterns in your WordPress files. It checks for obfuscated code, dangerous PHP functions, injected scripts, and known malicious patterns.', 'cadssl'); ?></p>
                    <p><?php _e('When suspicious files are found, you can quarantine them to prevent any potential harmful code from executing on your website.', 'cadssl'); ?></p>
                    
                    <div class="cadssl-icon-row">
                        <div class="cadssl-icon-feature">
                            <span class="cadssl-icon cadssl-icon-search"></span>
                            <span class="cadssl-icon-text"><?php _e('Malicious Code Detection', 'cadssl'); ?></span>
                        </div>
                        <div class="cadssl-icon-feature">
                            <span class="cadssl-icon cadssl-icon-lock"></span>
                            <span class="cadssl-icon-text"><?php _e('Quarantine Protection', 'cadssl'); ?></span>
                        </div>
                        <div class="cadssl-icon-feature">
                            <span class="cadssl-icon cadssl-icon-clock"></span>
                            <span class="cadssl-icon-text"><?php _e('Scheduled Scans', 'cadssl'); ?></span>
                        </div>
                    </div>
                    
                    <?php if ($last_scan_time): ?>
                        <p class="cadssl-last-scan-time">
                            <span class="dashicons dashicons-calendar"></span>
                            <?php 
                            printf(
                                __('Last scan: %s', 'cadssl'),
                                date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($last_scan_time))
                            );
                            ?>
                        </p>
                    <?php endif; ?>
                    
                    <div class="cadssl-scan-actions">
                        <?php if (!$active_scan): ?>
                            <button type="button" id="cadssl-start-scan" class="button button-primary">
                                <span class="dashicons dashicons-shield"></span>
                                <?php _e('Start Scan', 'cadssl'); ?>
                            </button>
                        <?php endif; ?>
                    </div>
                </div>
            </div>
            
            <div class="cadssl-scan-container">
                <div id="cadssl-scan-progress-container" class="cadssl-admin-card cadssl-scan-progress" style="display: none;">
                    <div class="cadssl-card-header">
                        <h2><?php _e('Scan Progress', 'cadssl'); ?></h2>
                    </div>
                    <div class="cadssl-card-body">
                        <div class="cadssl-scan-status-container">
                            <div class="cadssl-scan-icon">
                                <div class="cadssl-spinner-container">
                                    <div class="cadssl-spinner"></div>
                                </div>
                            </div>
                            <div class="cadssl-scan-status">
                                <div id="cadssl-scan-status-text" class="cadssl-scan-status-text"><?php _e('Preparing scan...', 'cadssl'); ?></div>
                                <div class="cadssl-progress-bar-container">
                                    <div id="cadssl-progress-bar" class="cadssl-progress-bar-outer">
                                        <div class="cadssl-progress-bar-inner" style="width: 0%"></div>
                                    </div>
                                </div>
                                <div id="cadssl-scan-stats" class="cadssl-scan-stats">
                                    <span id="cadssl-scanned-count">0</span> <?php _e('files scanned', 'cadssl'); ?> |
                                    <span id="cadssl-issues-count">0</span> <?php _e('issues found', 'cadssl'); ?>
                                </div>
                                <div id="cadssl-scan-progress-detail" class="cadssl-scan-progress-detail"></div>
                            </div>
                        </div>
                        
                        <div class="cadssl-scan-phases">
                            <div class="cadssl-scan-phase cadssl-phase-active" id="cadssl-phase-1">
                                <div class="cadssl-phase-icon">1</div>
                                <div class="cadssl-phase-text"><?php _e('Preparing', 'cadssl'); ?></div>
                            </div>
                            <div class="cadssl-scan-phase" id="cadssl-phase-2">
                                <div class="cadssl-phase-icon">2</div>
                                <div class="cadssl-phase-text"><?php _e('Scanning', 'cadssl'); ?></div>
                            </div>
                            <div class="cadssl-scan-phase" id="cadssl-phase-3">
                                <div class="cadssl-phase-icon">3</div>
                                <div class="cadssl-phase-text"><?php _e('Analyzing', 'cadssl'); ?></div>
                            </div>
                            <div class="cadssl-scan-phase" id="cadssl-phase-4">
                                <div class="cadssl-phase-icon">4</div>
                                <div class="cadssl-phase-text"><?php _e('Complete', 'cadssl'); ?></div>
                            </div>
                        </div>
                        
                        <div class="cadssl-scan-controls">
                            <button type="button" id="cadssl-cancel-scan" class="button button-secondary">
                                <span class="dashicons dashicons-no"></span>
                                <?php _e('Cancel Scan', 'cadssl'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div id="cadssl-scan-results-container" class="cadssl-admin-card cadssl-scan-results" style="display: none;">
                    <div class="cadssl-card-header">
                        <h2><?php _e('Scan Results', 'cadssl'); ?></h2>
                    </div>
                    <div class="cadssl-card-body">
                        <div class="cadssl-scan-summary">
                            <div class="cadssl-summary-item">
                                <div class="cadssl-summary-icon cadssl-summary-files">
                                    <span class="dashicons dashicons-media-default"></span>
                                </div>
                                <div class="cadssl-summary-data">
                                    <div class="cadssl-summary-value" id="cadssl-summary-files">0</div>
                                    <div class="cadssl-summary-label"><?php _e('Files Scanned', 'cadssl'); ?></div>
                                </div>
                            </div>
                            
                            <div class="cadssl-summary-item">
                                <div class="cadssl-summary-icon cadssl-summary-suspicious">
                                    <span class="dashicons dashicons-warning"></span>
                                </div>
                                <div class="cadssl-summary-data">
                                    <div class="cadssl-summary-value" id="cadssl-summary-suspicious">0</div>
                                    <div class="cadssl-summary-label"><?php _e('Suspicious Files', 'cadssl'); ?></div>
                                </div>
                            </div>
                            
                            <div class="cadssl-summary-item">
                                <div class="cadssl-summary-icon cadssl-summary-malware">
                                    <span class="dashicons dashicons-dismiss"></span>
                                </div>
                                <div class="cadssl-summary-data">
                                    <div class="cadssl-summary-value" id="cadssl-summary-malware">0</div>
                                    <div class="cadssl-summary-label"><?php _e('Malware Detected', 'cadssl'); ?></div>
                                </div>
                            </div>
                        </div>
                        
                        <div id="cadssl-no-issues-found" style="display: none;">
                            <div class="cadssl-success-message">
                                <span class="dashicons dashicons-yes-alt"></span>
                                <p><?php _e('No issues were found. Your website appears to be clean!', 'cadssl'); ?></p>
                            </div>
                        </div>
                        
                        <div id="cadssl-issues-found" style="display: none;">
                            <h3><?php _e('Detected Issues', 'cadssl'); ?></h3>
                            <div id="cadssl-issues-table-container">
                                <table class="widefat cadssl-issues-table" id="cadssl-issues-table">
                                    <thead>
                                        <tr>
                                            <th><?php _e('File', 'cadssl'); ?></th>
                                            <th><?php _e('Type', 'cadssl'); ?></th>
                                            <th><?php _e('Threat Level', 'cadssl'); ?></th>
                                            <th><?php _e('Details', 'cadssl'); ?></th>
                                            <th><?php _e('Actions', 'cadssl'); ?></th>
                                        </tr>
                                    </thead>
                                    <tbody id="cadssl-issues-list"></tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div class="cadssl-scan-actions">
                            <button type="button" id="cadssl-rescan" class="button button-primary">
                                <span class="dashicons dashicons-update"></span>
                                <?php _e('Scan Again', 'cadssl'); ?>
                            </button>
                            <button type="button" id="cadssl-download-report" class="button button-secondary">
                                <span class="dashicons dashicons-download"></span>
                                <?php _e('Download Report', 'cadssl'); ?>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <?php if (!empty($quarantined_files)): ?>
                <div class="cadssl-admin-card cadssl-quarantine">
                    <div class="cadssl-card-header">
                        <h2><?php _e('Quarantined Files', 'cadssl'); ?></h2>
                    </div>
                    <div class="cadssl-card-body">
                        <table class="widefat cadssl-quarantine-table">
                            <thead>
                                <tr>
                                    <th><?php _e('File', 'cadssl'); ?></th>
                                    <th><?php _e('Original Location', 'cadssl'); ?></th>
                                    <th><?php _e('Quarantine Date', 'cadssl'); ?></th>
                                    <th><?php _e('Threat Type', 'cadssl'); ?></th>
                                    <th><?php _e('Actions', 'cadssl'); ?></th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($quarantined_files as $file): ?>
                                    <tr>
                                        <td><?php echo esc_html(basename($file['original_path'])); ?></td>
                                        <td><?php echo esc_html($file['original_path']); ?></td>
                                        <td><?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $file['quarantine_time']); ?></td>
                                        <td>
                                            <span class="cadssl-threat-level <?php echo esc_attr('cadssl-threat-' . $file['threat_level']); ?>">
                                                <?php echo esc_html(ucfirst($file['threat_level'])); ?>
                                            </span>
                                        </td>
                                        <td>
                                            <button type="button" class="button button-small cadssl-restore-file" 
                                                data-id="<?php echo esc_attr($file['id']); ?>">
                                                <span class="dashicons dashicons-undo"></span>
                                                <?php _e('Restore', 'cadssl'); ?>
                                            </button>
                                            <a href="<?php echo admin_url('admin.php?page=cadssl-file-viewer&file=' . urlencode($file['quarantine_path'])); ?>" class="button button-small">
                                                <span class="dashicons dashicons-visibility"></span>
                                                <?php _e('View', 'cadssl'); ?>
                                            </a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                        
                        <p class="cadssl-quarantine-info">
                            <span class="dashicons dashicons-info"></span>
                            <?php _e('Quarantined files are disabled and cannot run on your site. You can restore them if you\'re certain they\'re safe.', 'cadssl'); ?>
                        </p>
                    </div>
                </div>
            <?php endif; ?>
        </div>
        <?php
    }
    
    /**
     * Display scan results page
     * 
     * @param string $scan_id Scan ID
     */
    private function display_scan_results_page($scan_id) {
        // Get scan results
        $scan_data = get_option('cadssl_background_scan_' . $scan_id);
        
        if (!$scan_data || $scan_data['status'] !== 'completed') {
            echo '<div class="notice notice-error"><p>' . __('Scan results not found or scan is not completed yet.', 'cadssl') . '</p></div>';
            return;
        }
        
        // Format issues for display
        $formatted_issues = array();
        $suspicious_count = 0;
        $malware_count = 0;
        
        foreach ($scan_data['issues'] as $file => $issues) {
            $highest_severity = 'low';
            $combined_details = array();
            
            foreach ($issues as $issue) {
                $combined_details[] = $issue['description'];
                
                // Track highest severity
                if ($issue['severity'] === 'high') {
                    $highest_severity = 'high';
                    $malware_count++;
                } elseif ($issue['severity'] === 'medium' && $highest_severity !== 'high') {
                    $highest_severity = 'medium';
                    $suspicious_count++;
                } elseif ($highest_severity === 'low') {
                    $suspicious_count++;
                }
            }
            
            $formatted_issues[] = array(
                'file' => $file,
                'filename' => basename($file),
                'file_id' => md5($file),
                'type' => count($issues) > 1 ? __('Multiple Issues', 'cadssl') : $issues[0]['type'],
                'severity' => $highest_severity,
                'details' => implode('<br>', $combined_details),
            );
        }
        
        // Calculate scan time
        $scan_time = $scan_data['last_active'] - $scan_data['start_time'];
        $scan_minutes = floor($scan_time / 60);
        $scan_seconds = $scan_time % 60;
        
        ?>
        <div class="wrap cadssl-malware-scanner-page">
            <h1>
                <i class="dashicons dashicons-shield"></i> <?php _e('Malware Scan Results', 'cadssl'); ?>
            </h1>
            
            <div class="cadssl-admin-card cadssl-scan-results">
                <div class="cadssl-card-header">
                    <h2><?php _e('Scan Summary', 'cadssl'); ?></h2>
                </div>
                <div class="cadssl-card-body">
                    <div class="cadssl-scan-summary">
                        <div class="cadssl-summary-item">
                            <div class="cadssl-summary-icon cadssl-summary-files">
                                <span class="dashicons dashicons-media-default"></span>
                            </div>
                            <div class="cadssl-summary-data">
                                <div class="cadssl-summary-value"><?php echo esc_html($scan_data['total_files']); ?></div>
                                <div class="cadssl-summary-label"><?php _e('Files Scanned', 'cadssl'); ?></div>
                            </div>
                        </div>
                        
                        <div class="cadssl-summary-item">
                            <div class="cadssl-summary-icon cadssl-summary-suspicious">
                                <span class="dashicons dashicons-warning"></span>
                            </div>
                            <div class="cadssl-summary-data">
                                <div class="cadssl-summary-value"><?php echo esc_html($suspicious_count); ?></div>
                                <div class="cadssl-summary-label"><?php _e('Suspicious Files', 'cadssl'); ?></div>
                            </div>
                        </div>
                        
                        <div class="cadssl-summary-item">
                            <div class="cadssl-summary-icon cadssl-summary-malware">
                                <span class="dashicons dashicons-dismiss"></span>
                            </div>
                            <div class="cadssl-summary-data">
                                <div class="cadssl-summary-value"><?php echo esc_html($malware_count); ?></div>
                                <div class="cadssl-summary-label"><?php _e('Malware Detected', 'cadssl'); ?></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="cadssl-scan-time">
                        <span class="dashicons dashicons-clock"></span>
                        <?php printf(__('Scan completed in %d minutes and %d seconds.', 'cadssl'), $scan_minutes, $scan_seconds); ?>
                    </div>
                </div>
            </div>
            
            <div class="cadssl-admin-card cadssl-scan-issues">
                <div class="cadssl-card-header">
                    <h2><?php _e('Detected Issues', 'cadssl'); ?></h2>
                </div>
                <div class="cadssl-card-body">
                    <?php if (empty($formatted_issues)): ?>
                        <div class="cadssl-success-message">
                            <span class="dashicons dashicons-yes-alt"></span>
                            <p><?php _e('No issues were found. Your website appears to be clean!', 'cadssl'); ?></p>
                        </div>
                    <?php else: ?>
                        <table class="widefat cadssl-issues-table">
                            <thead>
                                <tr>
                                    <th><?php _e('File', 'cadssl'); ?></th>
                                    <th><?php _e('Type', 'cadssl'); ?></th>
                                    <th><?php _e('Threat Level', 'cadssl'); ?></th>
                                    <th><?php _e('Details', 'cadssl'); ?></th>
                                    <th><?php _e('Actions', 'cadssl'); ?></th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($formatted_issues as $issue): ?>
                                    <tr>
                                        <td><?php echo esc_html($issue['filename']); ?></td>
                                        <td><?php echo esc_html($issue['type']); ?></td>
                                        <td>
                                            <span class="cadssl-threat-level <?php echo esc_attr('cadssl-threat-' . $issue['severity']); ?>">
                                                <?php echo esc_html(ucfirst($issue['severity'])); ?>
                                            </span>
                                        </td>
                                        <td><?php echo wp_kses_post($issue['details']); ?></td>
                                        <td>
                                            <button type="button" class="button button-small cadssl-quarantine-file" data-file="<?php echo esc_attr($issue['file']); ?>">
                                                <span class="dashicons dashicons-shield"></span>
                                                <?php _e('Quarantine', 'cadssl'); ?>
                                            </button>
                                            <a href="<?php echo admin_url('admin.php?page=cadssl-file-viewer&file=' . urlencode($issue['file'])); ?>" class="button button-small">
                                                <span class="dashicons dashicons-visibility"></span>
                                                <?php _e('View', 'cadssl'); ?>
                                            </a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    <?php endif; ?>
                </div>
            </div>
            
            <div class="cadssl-scan-actions">
                <a href="<?php echo esc_url(admin_url('admin.php?page=cadssl-malware-scanner')); ?>" class="button button-secondary">
                    <span class="dashicons dashicons-arrow-left-alt"></span>
                    <?php _e('Back to Scanner', 'cadssl'); ?>
                </a>
                <button type="button" id="cadssl-download-report" class="button button-secondary">
                    <span class="dashicons dashicons-download"></span>
                    <?php _e('Download Report', 'cadssl'); ?>
                </button>
            </div>
        </div>
        <?php
    }
    
    /**
     * AJAX: Start malware scan
     */
    public function ajax_start_scan() {
        // Verify nonce
        check_ajax_referer('cadssl_start_malware_scan', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        try {
            // Get file paths to scan
            $files_to_scan = $this->get_files_to_scan();
            
            // Store scan session data
            $scan_id = uniqid('scan_');
            $scan_session = array(
                'id' => $scan_id,
                'total_files' => count($files_to_scan),
                'scanned_files' => 0,
                'files' => $files_to_scan,
                'issues' => array(),
                'start_time' => time()
            );
            
            update_option('cadssl_current_scan_' . $scan_id, $scan_session);
            
            // Send response
            wp_send_json_success(array(
                'scan_id' => $scan_id,
                'total_files' => count($files_to_scan)
            ));
            
        } catch (Exception $e) {
            wp_send_json_error(array('message' => $e->getMessage()));
        }
    }
    
    /**
     * AJAX: Process scan batch
     */
    public function ajax_process_scan_batch() {
        // Error handling wrapper for entire function
        try {
            // Verify nonce
            check_ajax_referer('cadssl_process_malware_scan_batch', 'security');
            
            // Check user capabilities
            if (!current_user_can('manage_options')) {
                wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
                return;
            }
            
            // Get scan ID and current offset
            $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
            $offset = isset($_POST['offset']) ? intval($_POST['offset']) : 0;
            
            if (empty($scan_id)) {
                wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
                return;
            }
            
            // Get scan session data
            $scan_session = get_option('cadssl_current_scan_' . $scan_id);
            if (!$scan_session) {
                wp_send_json_error(array('message' => __('Scan session not found.', 'cadssl')));
                return;
            }
            
            // Set time limit and increase memory limit
            $this->increase_resources();
            
            // Get files for this batch
            $files = array_slice($scan_session['files'], $offset, self::BATCH_SIZE);
            
            if (empty($files)) {
                // No more files to scan, finalize
                $this->finalize_scan($scan_session);
                
                wp_send_json_success(array(
                    'status' => 'completed',
                    'scanned' => $scan_session['total_files'],
                    'issues_count' => count($scan_session['issues']),
                    'completion_percent' => 100
                ));
                return;
            }
            
            // Scan batch of files
            $issues = array();
            $current_file_index = 0;
            $files_processed = 0;
            
            foreach ($files as $file) {
                try {
                    // Save checkpoint for current file in case of timeout
                    update_option('cadssl_scan_checkpoint_' . $scan_id, array(
                        'current_file' => $file,
                        'file_index' => $current_file_index,
                        'batch_offset' => $offset
                    ));
                    
                    // Skip scanning if file doesn't exist or is too big
                    if (!file_exists($file) || !is_readable($file) || filesize($file) > 5 * 1024 * 1024) {
                        // Skip this file but count it as processed
                        $files_processed++;
                        $current_file_index++;
                        continue;
                    }
                    
                    // Skip if file is in excluded directories
                    if ($this->is_excluded($file)) {
                        $files_processed++;
                        $current_file_index++;
                        continue;
                    }
                    
                    // Check memory before scanning next file
                    if ($this->is_memory_low()) {
                        // Stop processing this batch and return success with fewer files
                        break;
                    }
                    
                    // Scan the file with error isolation
                    $file_issues = $this->scan_file_safely($file);
                    if (!empty($file_issues)) {
                        $issues[$file] = $file_issues;
                    }
                    
                    $files_processed++;
                    $current_file_index++;
                } catch (Exception $e) {
                    // Log error but continue with next file
                    error_log('CADSSL Scanner: Error scanning file ' . $file . ': ' . $e->getMessage());
                    $files_processed++;
                    $current_file_index++;
                    continue;
                }
            }
            
            // Clear checkpoint after successful batch
            delete_option('cadssl_scan_checkpoint_' . $scan_id);
            
            // Update scan session
            $scan_session['scanned_files'] += $files_processed;
            $scan_session['issues'] = array_merge($scan_session['issues'], $issues);
            $scan_session['last_active'] = time();
            
            update_option('cadssl_current_scan_' . $scan_id, $scan_session);
            
            // Calculate progress
            $completion_percent = min(99, ($scan_session['scanned_files'] / $scan_session['total_files']) * 100);
            
            // Send response
            wp_send_json_success(array(
                'status' => 'in_progress',
                'next_offset' => $offset + $files_processed,
                'scanned' => $scan_session['scanned_files'],
                'issues_count' => count($scan_session['issues']),
                'completion_percent' => $completion_percent,
                'last_file' => basename(end($files)),
                'processed_count' => $files_processed
            ));
            
        } catch (Exception $e) {
            // Log full exception details
            error_log('CADSSL Malware Scanner fatal error: ' . $e->getMessage() . ' on line ' . $e->getLine() . ' in ' . $e->getFile());
            
            // Save the error state to help with recovery
            if (!empty($scan_id)) {
                update_option('cadssl_scan_error_' . $scan_id, array(
                    'message' => $e->getMessage(),
                    'offset' => isset($offset) ? $offset : 0,
                    'time' => time()
                ));
            }
            
            // Send error response with very basic data to minimize chance of failure
            wp_send_json_error(array('message' => 'Server error: ' . $e->getMessage()));
        }
    }
    
    /**
     * AJAX: Get scan results
     */
    public function ajax_get_scan_results() {
        // Verify nonce
        check_ajax_referer('cadssl_get_scan_results', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get scan ID
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        
        if (empty($scan_id)) {
            wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
        }
        
        // Get scan session data
        $scan_results = get_option('cadssl_last_malware_scan_results');
        if (!$scan_results) {
            wp_send_json_error(array('message' => __('Scan results not found.', 'cadssl')));
        }
        
        // Format results for display
        $formatted_results = array();
        $suspicious_count = 0;
        $malware_count = 0;
        
        foreach ($scan_results['issues'] as $file => $issues) {
            $highest_severity = 'low';
            $combined_details = array();
            
            foreach ($issues as $issue) {
                $combined_details[] = $issue['description'];
                
                // Track highest severity
                if ($issue['severity'] === 'high') {
                    $highest_severity = 'high';
                    $malware_count++;
                } elseif ($issue['severity'] === 'medium' && $highest_severity !== 'high') {
                    $highest_severity = 'medium';
                    $suspicious_count++;
                } elseif ($highest_severity === 'low') {
                    $suspicious_count++;
                }
            }
            
            $formatted_results[] = array(
                'file' => $file,
                'filename' => basename($file),
                'file_id' => md5($file),
                'type' => count($issues) > 1 ? __('Multiple Issues', 'cadssl') : $issues[0]['type'],
                'severity' => $highest_severity,
                'details' => implode('<br>', $combined_details),
            );
        }
        
        wp_send_json_success(array(
            'total_files' => $scan_results['total_files'],
            'issues' => $formatted_results,
            'suspicious_count' => $suspicious_count,
            'malware_count' => $malware_count,
            'scan_time' => $scan_results['scan_time']
        ));
    }
    
    /**
     * AJAX: Quarantine file
     */
    public function ajax_quarantine_file() {
        // Verify nonce
        check_ajax_referer('cadssl_quarantine_file', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get file path
        $file_path = isset($_POST['file']) ? sanitize_text_field($_POST['file']) : '';
        
        if (empty($file_path) || !file_exists(ABSPATH . $file_path)) {
            wp_send_json_error(array('message' => __('Invalid file path.', 'cadssl')));
        }
        
        try {
            $result = $this->quarantine_file(ABSPATH . $file_path);
            
            if ($result) {
                wp_send_json_success(array('message' => __('File quarantined successfully.', 'cadssl')));
            } else {
                wp_send_json_error(array('message' => __('Failed to quarantine file.', 'cadssl')));
            }
        } catch (Exception $e) {
            wp_send_json_error(array('message' => $e->getMessage()));
        }
    }
    
    /**
     * AJAX: Restore file from quarantine
     */
    public function ajax_restore_file() {
        // Verify nonce
        check_ajax_referer('cadssl_restore_file', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get quarantine ID
        $quarantine_id = isset($_POST['id']) ? sanitize_text_field($_POST['id']) : '';
        
        if (empty($quarantine_id)) {
            wp_send_json_error(array('message' => __('Invalid quarantine ID.', 'cadssl')));
        }
        
        try {
            $result = $this->restore_quarantined_file($quarantine_id);
            
            if ($result) {
                wp_send_json_success(array('message' => __('File restored successfully.', 'cadssl')));
            } else {
                wp_send_json_error(array('message' => __('Failed to restore file.', 'cadssl')));
            }
        } catch (Exception $e) {
            wp_send_json_error(array('message' => $e->getMessage()));
        }
    }
    
    /**
     * Get files to scan
     * 
     * @param string $directory Directory to scan (defaults to ABSPATH)
     * @param array $exclude_patterns Patterns to exclude
     * @return array Array of file paths
     */
    private function get_files_to_scan($directory = ABSPATH, $exclude_patterns = array()) {
        // If no exclude patterns are provided, use the default ones
        if (empty($exclude_patterns)) {
            $exclude_patterns = array(
                '/wp-content/uploads/',
                '/wp-content/cache/',
                '/wp-content/backup/',
                '/wp-content/updraft/',
                '/wp-content/plugins/CADSSL/quarantine/'
            );
        }
        
        // Add a memory-efficient approach to scan directories
        $files = $this->get_files_memory_efficient($directory, $exclude_patterns);
        
        // Sort files alphabetically to make batch processing more predictable
        sort($files);
        
        return $files;
    }
    
    /**
     * Get files in a memory-efficient way
     * 
     * @param string $directory Directory to scan
     * @param array $exclude_patterns Patterns to exclude
     * @return array Array of file paths
     */
    private function get_files_memory_efficient($directory = ABSPATH, $exclude_patterns = array()) {
        $files = array();
        $wp_root = $directory;
        
        // Files to scan in the root directory
        $root_files = array(
            $wp_root . 'index.php',
            $wp_root . 'wp-config.php',
            $wp_root . '.htaccess'
        );
        
        // Add root files
        foreach ($root_files as $file) {
            if (file_exists($file) && is_readable($file)) {
                $files[] = $file;
            }
        }
        
        // Directories to scan
        $scan_dirs = array(
            $wp_root . 'wp-content/themes',
            $wp_root . 'wp-content/plugins',
            $wp_root . 'wp-content/mu-plugins',
            $wp_root . 'wp-includes',
            $wp_root . 'wp-admin'
        );
        
        // Add scan directories
        foreach ($scan_dirs as $dir) {
            if (is_dir($dir) && is_readable($dir)) {
                $this->add_directory_files($dir, $files, $exclude_patterns);
            }
        }
        
        // Put all files in random order to prevent predictable timeouts
        shuffle($files);
        
        return $files;
    }
    
    /**
     * Add directory files recursively with lower memory usage
     * 
     * @param string $dir Directory path
     * @param array &$files Array to add files to
     * @param array $exclude_patterns Patterns to exclude
     */
    private function add_directory_files($dir, &$files, $exclude_patterns = array()) {
        // Skip excluded directories
        foreach ($exclude_patterns as $excluded) {
            if (strpos($dir, $excluded) !== false) {
                return;
            }
        }
        
        foreach ($this->excluded_files as $excluded) {
            if (strpos($dir, $excluded) !== false) {
                return;
            }
        }
        
        $items = @scandir($dir);
        if (!$items) return;
        
        foreach ($items as $item) {
            if ($item == '.' || $item == '..') continue;
            
            $path = $dir . '/' . $item;
            
            // Skip unreadable files
            if (!is_readable($path)) continue;
            
            // Skip files larger than 5MB
            if (is_file($path) && filesize($path) > 5 * 1024 * 1024) continue;
            
            if (is_dir($path)) {
                $this->add_directory_files($path, $files, $exclude_patterns);
            } else {
                // Only add relevant file types to reduce load
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $scan_exts = array('php', 'js', 'html', 'htm', 'txt', 'css', 'phtml', 'php4', 'php5', 'php7', 'phps', 'htaccess');
                
                if (in_array(strtolower($ext), $scan_exts)) {
                    $files[] = $path;
                }
            }
        }
    }
    
    /**
     * Scan a directory recursively for files
     * 
     * @param string $dir Directory to scan
     * @return array Array of file paths
     */
    private function scan_directory_for_files($dir) {
        $files = array();
        
        try {
            $iterator = new RecursiveDirectoryIterator($dir);
            $file_iterator = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);
            
            foreach ($file_iterator as $file) {
                if ($file->isFile()) {
                    $files[] = $file->getPathname();
                }
            }
        } catch (Exception $e) {
            // Log scanning errors
            error_log('CADSSL Malware Scanner error: ' . $e->getMessage());
        }
        
        return $files;
    }
    
    /**
     * Scan individual file for suspicious code
     * 
     * @param string $file_path File path
     * @return array Array of issues found
     */
    private function scan_file($file_path) {
        $issues = array();
        
        // Read file content
        $content = @file_get_contents($file_path);
        if ($content === false) {
            return $issues;
        }
        
        // Strip comments to avoid noise but keep line numbers
        $content_without_comments = $this->strip_php_comments($content);
        
        // Scan the file content for each suspicious pattern
        foreach ($this->get_suspicious_patterns() as $pattern) {
            preg_match_all($pattern['pattern'], $content_without_comments, $matches, PREG_OFFSET_CAPTURE);
            
            if (!empty($matches[0])) {
                foreach ($matches[0] as $match) {
                    $line_number = substr_count($content, "\n", 0, $match[1]) + 1;
                    $issues[] = array(
                        'type' => $pattern['type'],
                        'description' => $pattern['description'],
                        'severity' => $pattern['severity'],
                        'line' => $line_number,
                        'code' => $this->get_context_code($content, $match[1])
                    );
                }
            }
        }
        
        return $issues;
    }
    
    /**
     * Get suspicious patterns to scan for
     * 
     * @return array Array of patterns
     */
    private function get_suspicious_patterns() {
        return array(
            array(
                'type' => 'eval',
                'pattern' => '/eval\s*\(\s*(\$_POST|\$_GET|\$_REQUEST|\$_COOKIE|\$_SERVER|\$_FILES|\$_ENV|\$HTTP_RAW_POST_DATA|\$\{.*?\}|base64_decode|str_rot13|gzinflate|gzuncompress|strrev|convert_uudecode)/i',
                'description' => 'Suspicious eval() usage that could be a backdoor',
                'severity' => 'high'
            ),
            array(
                'type' => 'base64_decode',
                'pattern' => '/base64_decode\s*\(\s*(\$_POST|\$_GET|\$_REQUEST|\$_COOKIE|\$_SERVER|\$_FILES|\$_ENV|\$HTTP_RAW_POST_DATA|\$\{.*?\})/i',
                'description' => 'Suspicious base64_decode() usage with user input',
                'severity' => 'high'
            ),
            array(
                'type' => 'create_function',
                'pattern' => '/create_function\s*\(/i',
                'description' => 'Use of deprecated create_function() which can lead to code execution vulnerabilities',
                'severity' => 'medium'
            ),
            array(
                'type' => 'shell_exec',
                'pattern' => '/(shell_exec|exec|system|passthru|popen|proc_open|pcntl_exec)\s*\(/i',
                'description' => 'System command execution function that could be used maliciously',
                'severity' => 'high'
            ),
            array(
                'type' => 'assert',
                'pattern' => '/assert\s*\(\s*(\$_POST|\$_GET|\$_REQUEST|\$_COOKIE|\$_SERVER|\$_FILES|\$_ENV|\$HTTP_RAW_POST_DATA|\$\{.*?\})/i',
                'description' => 'Suspicious assert() usage with user input',
                'severity' => 'high'
            ),
            array(
                'type' => 'preg_replace_eval',
                'pattern' => '/preg_replace\s*\(\s*([\'"])(.).*?\\2[a-z]*e[a-z]*\\1/i',
                'description' => 'Suspicious preg_replace() with /e modifier (code execution)',
                'severity' => 'high'
            ),
            array(
                'type' => 'include_url',
                'pattern' => '/(include|require|include_once|require_once)\s*\(\s*[\'"]https?:\/\//i',
                'description' => 'Including remote file by URL, which is a security risk',
                'severity' => 'high'
            ),
            array(
                'type' => 'include_user_input',
                'pattern' => '/(include|require|include_once|require_once)\s*\(\s*(\$_POST|\$_GET|\$_REQUEST|\$_COOKIE|\$_SERVER|\$_FILES|\$_ENV|\$HTTP_RAW_POST_DATA|\$\{.*?\})/i',
                'description' => 'Including file from user input, which is a security risk',
                'severity' => 'high'
            ),
            array(
                'type' => 'variable_variables',
                'pattern' => '/\$\{?\$+[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*\}?/i',
                'description' => 'Variable variables usage often found in obfuscated code',
                'severity' => 'medium'
            ),
            array(
                'type' => 'iframe',
                'pattern' => '/<iframe[^>]*src=([\'"])(https?:)?\/\/(?!www\.google\.com|youtube\.com|player\.vimeo\.com)[^>]*>/i',
                'description' => 'Suspicious iFrame element to external URL',
                'severity' => 'medium'
            ),
            array(
                'type' => 'javascript_redirect',
                'pattern' => '/window\.location\s*=|location\.href\s*=|document\.location\s*=|document\.location\.href\s*=/i',
                'description' => 'JavaScript page redirect often used in malware',
                'severity' => 'medium'
            ),
            array(
                'type' => 'hidden_code',
                'pattern' => '/<div[^>]*style=([\'"])display:\s*none[^>]*>.*?<\/div>/i',
                'description' => 'Hidden div that could contain spam or malware',
                'severity' => 'medium'
            ),
            array(
                'type' => 'encoding_chars',
                'pattern' => '/\\\\x[0-9a-f]{2}/i',
                'description' => 'Encoded characters often used in obfuscated code',
                'severity' => 'medium'
            ),
            array(
                'type' => 'php_in_upload',
                'pattern' => '/<\?php/i',
                'description' => 'PHP code in uploads directory is a high-risk vulnerability',
                'severity' => 'high',
                'context' => 'uploads'
            ),
            array(
                'type' => 'hidden_upload',
                'pattern' => '/\.php\.[a-z0-9]{2,5}$|\.ph\w{0,3}$|\.pht\w{0,2}$/i',
                'description' => 'Possible hidden PHP file with unusual extension',
                'severity' => 'medium',
                'type' => 'filename'
            )
        );
    }
    
    /**
     * Strip PHP comments but preserve line numbers - improved for efficiency
     * 
     * @param string $content The PHP code to strip comments from
     * @return string Code with comments removed
     */
    private function strip_php_comments($content) {
        // For very large files, just scan without stripping to avoid memory issues
        if (strlen($content) > 1 * 1024 * 1024) { // 1MB
            return $content;
        }
        
        $replacements = array(
            // Replace multi-line comments with newlines to preserve line numbers
            '#/\*.*?\*/#s' => function($match) {
                return str_repeat("\n", substr_count($match[0], "\n"));
            },
            // Replace single-line comments with empty space
            '#(?<!:)//.*$#m' => '',
            '#(?<!:)#.*$#m' => ''
        );
        
        // Apply replacements
        foreach ($replacements as $pattern => $replacement) {
            if (is_callable($replacement)) {
                $content = preg_replace_callback($pattern, $replacement, $content);
            } else {
                $content = preg_replace($pattern, $replacement, $content);
            }
        }
        
        return $content;
    }
    
    /**
     * Get context code for a match
     * 
     * @param string $content File content
     * @param int $offset Offset of match
     * @return string Snippet of code with context
     */
    private function get_context_code($content, $offset) {
        $line_start = max(0, strrpos($content, "\n", $offset - strlen($content)));
        $line_end = strpos($content, "\n", $offset);
        
        if ($line_end === false) {
            $line_end = strlen($content);
        }
        
        return trim(substr($content, $line_start, $line_end - $line_start));
    }
    
    /**
     * Quarantine a file
     * 
     * @param string $file_path File path
     * @return bool True on success, false on failure
     */
    private function quarantine_file($file_path) {
        $quarantine_dir = CADSSL_PATH . 'quarantine';
        
        if (!is_dir($quarantine_dir)) {
            mkdir($quarantine_dir, 0755, true);
        }
        
        $quarantine_id = md5($file_path . time());
        $quarantine_path = $quarantine_dir . '/' . $quarantine_id . '.php';
        
        if (rename($file_path, $quarantine_path)) {
            $quarantine_data = array(
                'id' => $quarantine_id,
                'original_path' => str_replace(ABSPATH, '', $file_path),
                'quarantine_path' => $quarantine_path,
                'quarantine_time' => time(),
                'threat_level' => 'high'
            );
            
            file_put_contents($quarantine_dir . '/' . $quarantine_id . '.json', json_encode($quarantine_data));
            
            return true;
        }
        
        return false;
    }
    
    /**
     * Restore a quarantined file
     * 
     * @param string $quarantine_id Quarantine ID
     * @return bool True on success, false on failure
     */
    private function restore_quarantined_file($quarantine_id) {
        $quarantine_dir = CADSSL_PATH . 'quarantine';
        $quarantine_file = $quarantine_dir . '/' . $quarantine_id . '.json';
        
        if (!file_exists($quarantine_file)) {
            return false;
        }
        
        $quarantine_data = json_decode(file_get_contents($quarantine_file), true);
        if (!$quarantine_data) {
            return false;
        }
        
        $original_path = ABSPATH . $quarantine_data['original_path'];
        $quarantine_path = $quarantine_data['quarantine_path'];
        
        if (rename($quarantine_path, $original_path)) {
            unlink($quarantine_file);
            return true;
        }
        
        return false;
    }
    
    /**
     * Finalize scan and store results
     * 
     * @param array $scan_session Scan session data
     */
    private function finalize_scan($scan_session) {
        $scan_results = array(
            'total_files' => $scan_session['total_files'],
            'issues' => $scan_session['issues'],
            'scan_time' => time() - $scan_session['start_time']
        );
        
        update_option('cadssl_last_malware_scan_results', $scan_results);
        update_option('cadssl_last_malware_scan_time', date('Y-m-d H:i:s'));
        
        delete_option('cadssl_current_scan_' . $scan_session['id']);
    }
    
    /**
     * Run automated scan and notify admins
     */
    public function run_automated_scan() {
        // Create a scan lock
        if (!CADSSL_Scan_Lock_Manager::create_lock('automated_malware_scan')) {
            error_log('CADSSL Security: Could not create scan lock for automated scan');
            return false;
        }
        
        try {
            // Get files to scan - use the same method CADSSL_Background_Scanner is trying to use
            $files = $this->get_files_to_scan();
            
            // Run the malware scan
            $results = $this->scan_for_malware($files);
            
            // Process and save results
            $organized_results = $this->process_scan_results($results);
            update_option('cadssl_last_malware_scan', $organized_results);
            update_option('cadssl_last_malware_scan_time', time());
            
            // Release the scan lock
            CADSSL_Scan_Lock_Manager::release_lock();
            
            return true;
        } catch (Exception $e) {
            error_log('CADSSL Security: Error during automated scan: ' . $e->getMessage());
            
            // Always release lock on error
            CADSSL_Scan_Lock_Manager::release_lock();
            
            return false;
        }
    }
    
    /**
     * AJAX: Check for interrupted scans
     */
    public function ajax_check_interrupted_scan() {
        // Verify nonce
        check_ajax_referer('cadssl_check_interrupted_scan', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Check if there's an interrupted scan
        $interrupted = get_option('cadssl_interrupted_scan', false);
        
        if ($interrupted) {
            // Calculate progress
            $progress = 0;
            if ($interrupted['total_files'] > 0) {
                $progress = round(($interrupted['scanned_files'] / $interrupted['total_files']) * 100);
            }
            
            wp_send_json_success(array(
                'interrupted' => true,
                'scan_id' => $interrupted['scan_id'],
                'progress' => $progress
            ));
        } else {
            wp_send_json_success(array('interrupted' => false));
        }
    }
    
    /**
     * AJAX: Clear interrupted scan
     */
    public function ajax_clear_interrupted_scan() {
        // Verify nonce
        check_ajax_referer('cadssl_clear_interrupted_scan', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Clear the interrupted scan data
        delete_option('cadssl_interrupted_scan');
        
        // Clear the scan session if provided
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        if (!empty($scan_id)) {
            delete_option('cadssl_current_scan_' . $scan_id);
        }
        
        wp_send_json_success(array('message' => __('Interrupted scan cleared.', 'cadssl')));
    }
    
    /**
     * AJAX: Get scan status
     */
    public function ajax_get_scan_status() {
        // Verify nonce
        check_ajax_referer('cadssl_get_scan_status', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get scan ID
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        
        if (empty($scan_id)) {
            wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
        }
        
        // Get scan data
        $scan_data = get_option('cadssl_current_scan_' . $scan_id);
        
        if (!$scan_data) {
            // Try to get from interrupted scan data
            $interrupted = get_option('cadssl_interrupted_scan');
            if ($interrupted && $interrupted['scan_id'] === $scan_id) {
                $scan_data = array(
                    'total_files' => $interrupted['total_files'],
                    'scanned_files' => $interrupted['scanned_files'],
                    'issues' => array(), // Will be populated during scan
                );
            } else {
                wp_send_json_error(array('message' => __('Scan data not found.', 'cadssl')));
            }
        }
        
        // Return scan status
        wp_send_json_success(array(
            'total_files' => $scan_data['total_files'],
            'scanned_files' => $scan_data['scanned_files'],
            'issues_count' => count($scan_data['issues']),
            'completion_percent' => ($scan_data['scanned_files'] / $scan_data['total_files']) * 100
        ));
    }
    
    /**
     * AJAX: Scan heartbeat to keep track of scan progress
     */
    public function ajax_scan_heartbeat() {
        // Verify nonce
        check_ajax_referer('cadssl_scan_heartbeat', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get scan ID
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        
        if (empty($scan_id)) {
            wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
        }
        
        // Update scan heartbeat
        update_option('cadssl_scan_heartbeat_' . $scan_id, time());
        
        wp_send_json_success(array('message' => __('Scan heartbeat updated.', 'cadssl')));
    }
    
    /**
     * AJAX: Mark scan as interrupted
     */
    public function ajax_mark_scan_interrupted() {
        // Verify nonce
        check_ajax_referer('cadssl_mark_scan_interrupted', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get scan ID
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        
        if (empty($scan_id)) {
            wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
        }
        
        // Get scan session data
        $scan_session = get_option('cadssl_current_scan_' . $scan_id);
        if (!$scan_session) {
            wp_send_json_error(array('message' => __('Scan session not found.', 'cadssl')));
        }
        
        // Mark scan as interrupted
        update_option('cadssl_interrupted_scan', $scan_session);
        
        wp_send_json_success(array('message' => __('Scan marked as interrupted.', 'cadssl')));
    }
    
    /**
     * AJAX: Resume scan after error or timeout
     */
    public function ajax_resume_scan_from_error() {
        // Verify nonce
        check_ajax_referer('cadssl_resume_scan', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get scan ID
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        
        if (empty($scan_id)) {
            wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
        }
        
        // Get checkpoint data
        $checkpoint = get_option('cadssl_scan_checkpoint_' . $scan_id);
        if (!$checkpoint) {
            // If no checkpoint, try to get error data
            $error_data = get_option('cadssl_scan_error_' . $scan_id);
            if ($error_data) {
                $offset = $error_data['offset'];
            } else {
                // If no error data either, get scan data and find last scanned file
                $scan_data = get_option('cadssl_current_scan_' . $scan_id);
                if ($scan_data) {
                    $offset = $scan_data['scanned_files'];
                } else {
                    wp_send_json_error(array('message' => __('Could not find resume point for scan.', 'cadssl')));
                    return;
                }
            }
        } else {
            $offset = $checkpoint['batch_offset'] + $checkpoint['file_index'];
        }
        
        // Return the offset to resume from
        wp_send_json_success(array(
            'resume_offset' => $offset
        ));
    }
    
    /**
     * Increase server resources for scanning
     */
    private function increase_resources() {
        // Increase PHP memory limit
        if (function_exists('ini_set')) {
            @ini_set('memory_limit', self::MEMORY_LIMIT);
            @ini_set('max_execution_time', self::MAX_EXECUTION_TIME);
            @ini_set('display_errors', 0);
            @ini_set('log_errors', 1);
        }
        
        // Increase PHP time limit
        if (function_exists('set_time_limit') && !ini_get('safe_mode')) {
            @set_time_limit(self::MAX_EXECUTION_TIME);
        }
        
        // Disable output buffering
        @ob_end_clean();
        
        // Fix possible JSON issues
        header('Content-Type: application/json');
        
        // Ignore user aborts
        if (function_exists('ignore_user_abort')) {
            @ignore_user_abort(true);
        }
        
        // Prevent session timeouts
        if (session_id()) {
            @session_write_close();
        }
    }
    
    /**
     * Check if a file should be excluded from scanning
     * 
     * @param string $file_path File path to check
     * @return bool True if file should be excluded
     */
    public function is_excluded($file_path) {
        foreach ($this->excluded_files as $excluded) {
            if (strpos($file_path, $excluded) !== false) {
                return true;
            }
        }
        
        // Also check patterns from CADSSL_Malware_Patterns
        if (class_exists('CADSSL_Malware_Patterns')) {
            return CADSSL_Malware_Patterns::should_exclude_file($file_path);
        }
        
        return false;
    }
    
    /**
     * Check if memory usage is getting too high
     */
    private function is_memory_low() {
        $memory_limit = $this->get_memory_limit();
        $memory_usage = memory_get_usage(true);
        
        // If we're using more than 80% of available memory, stop to prevent crashes
        if ($memory_limit && $memory_usage / $memory_limit > 0.8) {
            return true;
        }
        
        return false;
    }
    
    /**
     * Get memory limit in bytes
     */
    private function get_memory_limit() {
        $memory_limit = ini_get('memory_limit');
        
        // Convert memory limit to bytes
        if (preg_match('/^(\d+)(.)$/', $memory_limit, $matches)) {
            if ($matches[2] == 'M') {
                return $matches[1] * 1024 * 1024;
            } else if ($matches[2] == 'K') {
                return $matches[1] * 1024;
            } else if ($matches[2] == 'G') {
                return $matches[1] * 1024 * 1024 * 1024;
            }
        }
        
        return $memory_limit;
    }
    
    /**
     * Scan a file with extra error handling
     */
    private function scan_file_safely($file_path) {
        try {
            // Set a time limit for each file
            if (function_exists('set_time_limit')) {
                @set_time_limit(30);
            }
            
            return $this->scan_file($file_path);
        } catch (Exception $e) {
            error_log('Error scanning file ' . $file_path . ': ' . $e->getMessage());
            return array();
        }
    }
    
    /**
     * Increase PHP execution time limit to avoid timeouts
     */
    private function increase_time_limit() {
        // Check if time limit can be changed
        if (function_exists('set_time_limit') && !ini_get('safe_mode')) {
            // Set to 5 minutes
            @set_time_limit(300);
        }
        
        // Increase memory limit if possible
        if (function_exists('ini_set')) {
            @ini_set('memory_limit', '256M');
        }
    }
    
    /**
     * AJAX: Get detailed scan progress
     * Provides detailed info about the current scan progress
     */
    public function ajax_get_detailed_progress() {
        // Verify nonce
        check_ajax_referer('cadssl_get_scan_progress', 'security');
        
        // Check user capabilities
        if (!current_user_can('manage_options')) {
            wp_send_json_error(array('message' => __('You do not have permission to perform this action.', 'cadssl')));
        }
        
        // Get scan ID
        $scan_id = isset($_POST['scan_id']) ? sanitize_text_field($_POST['scan_id']) : '';
        
        if (empty($scan_id)) {
            wp_send_json_error(array('message' => __('Invalid scan ID.', 'cadssl')));
        }
        
        // Get scan session data
        $scan_data = get_option('cadssl_current_scan_' . $scan_id);
        $checkpoint = get_option('cadssl_scan_checkpoint_' . $scan_id);
        $error_data = get_option('cadssl_scan_error_' . $scan_id);
        
        $detailed_data = array(
            'active' => false,
            'progress' => 0,
            'current_file' => '',
            'scanned' => 0,
            'total' => 0,
            'issues' => 0,
            'has_error' => false,
            'error_message' => ''
        );
        
        if ($scan_data) {
            $detailed_data['active'] = (time() - $scan_data['last_active'] < 60); // 60 second threshold
            $detailed_data['scanned'] = $scan_data['scanned_files'];
            $detailed_data['total'] = $scan_data['total_files'];
            $detailed_data['progress'] = ($scan_data['scanned_files'] / $scan_data['total_files']) * 100;
            $detailed_data['issues'] = count($scan_data['issues']);
        }
        
        if ($checkpoint) {
            $detailed_data['current_file'] = basename($checkpoint['current_file']);
        }
        
        if ($error_data) {
            $detailed_data['has_error'] = true;
            $detailed_data['error_message'] = $error_data['message'];
        }
        
        wp_send_json_success($detailed_data);
    }

    /**
     * Get active background scan if there is one
     * 
     * @return array|false Scan data or false if no active scan
     */
    public function get_active_background_scan() {
        // Check if there's an active scan recorded
        $active_scan_id = get_option('cadssl_active_background_scan', false);
        
        // No active scan
        if (!$active_scan_id) {
            return false;
        }
        
        // Get scan data
        $scan_data = get_option('cadssl_background_scan_' . $active_scan_id, false);
        
        // No data found
        if (!$scan_data) {
            // Clean up orphaned reference
            delete_option('cadssl_active_background_scan');
            return false;
        }
        
        // Check if scan is recent enough to be considered active (within last 5 minutes)
        $is_active = (time() - $scan_data['last_active']) < 300;
        
        // If scan is completed or has been inactive for too long (except if it's completed), clean up
        if ($scan_data['status'] === 'completed' || (!$is_active && $scan_data['status'] !== 'completed')) {
            // If completed, leave data for viewing results
            if ($scan_data['status'] !== 'completed') {
                delete_option('cadssl_active_background_scan');
            }
        }
        
        // Calculate progress
        $progress = 0;
        if ($scan_data['total_files'] > 0) {
            $progress = round(($scan_data['scanned_files'] / $scan_data['total_files']) * 100, 1);
        }
        
        // Prepare return data
        $current_file = !empty($scan_data['current_file']) ? basename($scan_data['current_file']) : '';
        
        return array(
            'scan_id' => $active_scan_id,
            'total_files' => $scan_data['total_files'],
            'scanned_files' => $scan_data['scanned_files'],
            'current_file' => $current_file,
            'progress' => $progress,
            'status' => $scan_data['status'],
            'start_time' => $scan_data['start_time'],
            'last_active' => $scan_data['last_active'],
            'is_active' => $is_active,
            'issues_count' => isset($scan_data['issues']) ? count($scan_data['issues']) : 0
        );
    }

    /**
     * Process and organize scan results
     * 
     * @param array $scan_results Scan results
     * @return array Organized scan results
     */
    public function process_scan_results($scan_results) {
        // Process and organize scan results
        $organized_results = array(
            'critical' => array(),
            'high' => array(),
            'medium' => array(),
            'low' => array()
        );
        
        foreach ($scan_results as $result) {
            $severity = isset($result['severity']) ? $result['severity'] : 'medium';
            $organized_results[$severity][] = $result;
        }
        
        return $organized_results;
    }
    
    /**
     * Scan for malware
     * 
     * @param array $files Files to scan
     * @return array Scan results
     */
    public function scan_for_malware($files) {
        $results = array();
        
        foreach ($files as $file) {
            // Skip files that shouldn't be scanned
            if (CADSSL_Malware_Patterns::should_exclude_file($file)) {
                continue;
            }
            
            // Get file content
            $content = @file_get_contents($file);
            
            if ($content === false) {
                $results[] = array(
                    'file' => $file,
                    'line' => 0,
                    'description' => 'Could not read file',
                    'severity' => 'low',
                    'pattern' => ''
                );
                continue;
            }
            
            // Get all patterns to check
            $patterns = CADSSL_Malware_Patterns::get_all_patterns();
            
            foreach ($patterns as $pattern_info) {
                $matches = array();
                
                if (preg_match_all($pattern_info['pattern'], $content, $matches, PREG_OFFSET_CAPTURE)) {
                    foreach ($matches[0] as $match) {
                        // Calculate line number from offset
                        $line_number = substr_count(substr($content, 0, $match[1]), "\n") + 1;
                        
                        $results[] = array(
                            'file' => $file,
                            'line' => $line_number,
                            'description' => $pattern_info['description'],
                            'severity' => $pattern_info['severity'],
                            'pattern' => $match[0],
                            'match' => substr($match[0], 0, 100) . (strlen($match[0]) > 100 ? '...' : '')
                        );
                    }
                }
            }
            
            // Check for suspicious function usage
            $this->check_suspicious_functions($content, $file, $results);
        }
        
        return $results;
    }
    
    /**
     * Check if file is scannable
     * 
     * @param string $file File path to check
     * @return bool True if file can be scanned
     */
    public function is_scannable_file($file) {
        // Get file extension
        $extension = strtolower(pathinfo($file, PATHINFO_EXTENSION));
        
        // List of extensions to scan
        $scan_extensions = array(
            'php', 'phtml', 'php4', 'php5', 'php7', 'phps',
            'js', 'html', 'htm', 'htaccess'
        );
        
        return in_array($extension, $scan_extensions);
    }
}