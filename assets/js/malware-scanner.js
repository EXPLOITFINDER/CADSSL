/**
 * CADSSL Security - Malware Scanner JavaScript
 * Handles interactive malware scanning with animated progress indicators
 */
(function($) {
    'use strict';
    
    // Store scanner state
    var scanner = {
        scanId: null,
        totalFiles: 0,
        scannedFiles: 0,
        issuesFound: 0,
        isScanning: false,
        currentPhase: 1,
        retryCount: 0,
        maxRetries: 5, // Increased from 3 to 5 for better resilience
        lastActivity: 0,
        heartbeatTimer: null,
        progressUpdateTimer: null,
        lastProcessedFile: '',
        processingTimeout: 120000, // Increased timeout to 2 minutes
        consecutiveErrorCount: 0,
        maxConsecutiveErrors: 3
    };
    
    // DOM ready
    $(document).ready(function() {
        // Initialize scan button
        $('#cadssl-start-scan').on('click', startScan);
        
        // Initialize cancel button
        $('#cadssl-cancel-scan').on('click', cancelScan);
        
        // Initialize rescan button
        $('#cadssl-rescan').on('click', startScan);
        
        // Initialize download report button
        $('#cadssl-download-report').on('click', downloadReport);
        
        // Initialize restore buttons for quarantined files
        $('.cadssl-restore-file').on('click', function() {
            var fileId = $(this).data('id');
            restoreFile(fileId, $(this));
        });
        
        // Check for interrupted scans and offer to resume
        checkForInterruptedScan();
        
        // Animate icons
        initIconAnimations();

        // Add force release lock button handler
        $('#cadssl-force-release-lock').on('click', function() {
            forceReleaseScanLock();
        });
    });
    
    /**
     * Check for interrupted scans and offer to resume
     */
    function checkForInterruptedScan() {
        // Only check if we're not already scanning
        if (!scanner.isScanning) {
            $.ajax({
                url: cadssl_scanner.ajax_url,
                type: 'POST',
                data: {
                    action: 'cadssl_check_interrupted_scan',
                    security: cadssl_scanner.check_interrupted_nonce
                },
                success: function(response) {
                    if (response.success && response.data.interrupted) {
                        showRecoveryDialog(response.data.scan_id, response.data.progress);
                    }
                }
            });
        }
    }
    
    /**
     * Show dialog to recover interrupted scan
     * 
     * @param {string} scanId Scan ID of interrupted scan
     * @param {number} progress Progress percentage of interrupted scan
     */
    function showRecoveryDialog(scanId, progress) {
        // Create dialog HTML
        var $dialog = $('<div class="cadssl-recovery-dialog notice notice-warning is-dismissible"></div>')
            .append('<p><strong>' + cadssl_scanner.strings.scan_interrupted + '</strong></p>')
            .append('<p>' + cadssl_scanner.strings.scan_resume_msg + ' (' + progress + '% ' + cadssl_scanner.strings.completed + ')</p>')
            .append('<p><button class="button button-primary cadssl-resume-scan">' + cadssl_scanner.strings.resume_scan + '</button> <button class="button cadssl-new-scan">' + cadssl_scanner.strings.new_scan + '</button></p>')
            .hide()
            .prependTo('.cadssl-malware-scanner-page')
            .slideDown();
        
        // Add dismiss button
        $dialog.append(
            $('<button type="button" class="notice-dismiss"></button>')
                .on('click', function() {
                    $dialog.slideUp(function() { $(this).remove(); });
                })
        );
        
        // Handle resume button
        $dialog.find('.cadssl-resume-scan').on('click', function() {
            $dialog.slideUp(function() { $(this).remove(); });
            resumeScan(scanId);
        });
        
        // Handle new scan button
        $dialog.find('.cadssl-new-scan').on('click', function() {
            $dialog.slideUp(function() { $(this).remove(); });
            // Clear the interrupted scan
            $.ajax({
                url: cadssl_scanner.ajax_url,
                type: 'POST',
                data: {
                    action: 'cadssl_clear_interrupted_scan',
                    security: cadssl_scanner.clear_scan_nonce,
                    scan_id: scanId
                },
                success: function() {
                    startScan();
                }
            });
        });
    }
    
    /**
     * Resume an interrupted scan
     * 
     * @param {string} scanId Scan ID of interrupted scan
     */
    function resumeScan(scanId) {
        // Reset scanner state
        scanner = {
            scanId: scanId,
            totalFiles: 0,
            scannedFiles: 0,
            issuesFound: 0,
            isScanning: true,
            currentPhase: 2, // Start at scanning phase
            retryCount: 0,
            maxRetries: 5,
            lastActivity: Date.now(),
            heartbeatTimer: null,
            progressUpdateTimer: null,
            lastProcessedFile: '',
            processingTimeout: 120000,
            consecutiveErrorCount: 0,
            maxConsecutiveErrors: 3
        };
        
        // Hide any existing results
        $('#cadssl-scan-results-container').hide();
        
        // Show progress container
        $('#cadssl-scan-progress-container').fadeIn(300);
        
        // Disable scan buttons
        $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', true);
        
        // Update UI text
        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.scanning);
        $('#cadssl-scanned-count').text('0');
        $('#cadssl-issues-count').text('0');
        
        // Set scanning phase active
        updatePhaseIndicator(2);
        
        // Show preparing animation
        $('.cadssl-spinner-container').addClass('active');
        
        // Reset progress bar
        $('.cadssl-progress-bar-inner').css('width', '0%');
        
        // Get scan status
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_get_scan_status',
                security: cadssl_scanner.get_status_nonce,
                scan_id: scanId
            },
            success: function(response) {
                if (response.success) {
                    // Update scanner state
                    scanner.totalFiles = response.data.total_files;
                    scanner.scannedFiles = response.data.scanned_files;
                    scanner.issuesFound = response.data.issues_count;
                    
                    // Update UI
                    $('#cadssl-scanned-count').text(scanner.scannedFiles);
                    $('#cadssl-issues-count').text(scanner.issuesFound);
                    
                    // Update progress bar
                    var progressPercent = scanner.scannedFiles / scanner.totalFiles * 100;
                    $('.cadssl-progress-bar-inner').css('width', progressPercent + '%');
                    
                    // Start processing from where we left off
                    processNextBatch(scanner.scannedFiles);
                    
                    // Start heartbeat
                    startHeartbeat();
                } else {
                    // Show error
                    scanError(response.data.message || cadssl_scanner.strings.error_scanning);
                }
            },
            error: function() {
                scanError(cadssl_scanner.strings.error_scanning);
            }
        });
    }
    
    /**
     * Start the malware scan process
     */
    function startScan() {
        // Reset scanner state
        scanner = {
            scanId: null,
            totalFiles: 0,
            scannedFiles: 0,
            issuesFound: 0,
            isScanning: true,
            currentPhase: 1,
            retryCount: 0,
            maxRetries: 5,
            lastActivity: Date.now(),
            heartbeatTimer: null,
            progressUpdateTimer: null,
            lastProcessedFile: '',
            processingTimeout: 120000,
            consecutiveErrorCount: 0,
            maxConsecutiveErrors: 3
        };
        
        // Hide any existing results
        $('#cadssl-scan-results-container').hide();
        
        // Show progress container
        $('#cadssl-scan-progress-container').fadeIn(300);
        
        // Disable scan buttons
        $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', true);
        
        // Update UI text
        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.preparing);
        $('#cadssl-scanned-count').text('0');
        $('#cadssl-issues-count').text('0');
        
        // Set first phase active
        updatePhaseIndicator(1);
        
        // Show preparing animation
        $('.cadssl-spinner-container').addClass('active');
        
        // Reset progress bar
        $('.cadssl-progress-bar-inner').css('width', '0%');
        
        // Initiate scan via AJAX
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_start_malware_scan',
                security: cadssl_scanner.start_scan_nonce
            },
            success: function(response) {
                if (response.success) {
                    // Update scanner state
                    scanner.scanId = response.data.scan_id;
                    scanner.totalFiles = response.data.total_files;
                    scanner.lastActivity = Date.now();
                    
                    // Update UI
                    updatePhaseIndicator(2);
                    $('#cadssl-scan-status-text').text(cadssl_scanner.strings.scanning);
                    
                    // Start processing files
                    processNextBatch(0);
                    
                    // Start heartbeat
                    startHeartbeat();
                    
                    // Start the continuous progress updates
                    startProgressUpdates();
                } else {
                    // Show error
                    scanError(response.data.message || cadssl_scanner.strings.error_scanning);
                }
            },
            error: function() {
                scanError(cadssl_scanner.strings.error_scanning);
            },
            timeout: 30000 // 30 seconds timeout
        });
    }
    
    /**
     * Start continuous progress updates
     */
    function startProgressUpdates() {
        if (scanner.progressUpdateTimer) {
            clearInterval(scanner.progressUpdateTimer);
        }
        
        // Update progress every 3 seconds
        scanner.progressUpdateTimer = setInterval(function() {
            if (scanner.isScanning && scanner.scanId) {
                updateScanProgress();
            } else {
                clearInterval(scanner.progressUpdateTimer);
            }
        }, 3000);
    }
    
    /**
     * Update scan progress with detailed information
     */
    function updateScanProgress() {
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_get_detailed_progress',
                security: cadssl_scanner.get_progress_nonce,
                scan_id: scanner.scanId
            },
            success: function(response) {
                if (response.success) {
                    var data = response.data;
                    
                    // Update scanner state with latest data
                    scanner.scannedFiles = data.scanned;
                    scanner.issuesFound = data.issues;
                    scanner.lastActivity = Date.now();
                    
                    // Update UI
                    $('#cadssl-scanned-count').text(scanner.scannedFiles);
                    $('#cadssl-issues-count').text(scanner.issuesFound);
                    
                    // Show current file being processed
                    if (data.current_file) {
                        $('#cadssl-scan-progress-detail').text(cadssl_scanner.strings.processing_file + ' ' + data.current_file);
                    }
                    
                    // Update progress bar
                    $('.cadssl-progress-bar-inner').css('width', data.progress + '%');
                    
                    // Check if scan is inactive (potential timeout)
                    if (!data.active && scanner.isScanning) {
                        // Try to resume scan
                        scanner.retryCount++;
                        if (scanner.retryCount <= scanner.maxRetries) {
                            $('#cadssl-scan-status-text').text(cadssl_scanner.strings.reconnecting + ' (' + scanner.retryCount + '/' + scanner.maxRetries + ')');
                            resumeAfterError();
                        } else {
                            markScanAsInterrupted();
                            scanError(cadssl_scanner.strings.scan_timeout);
                        }
                    }
                    
                    // Check for errors
                    if (data.has_error) {
                        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.recovering + ' (' + scanner.retryCount + '/' + scanner.maxRetries + ')');
                        resumeAfterError();
                    }
                }
            },
            error: function() {
                // Connection error, but don't do anything drastic yet
                // The heartbeat will handle persistent connection issues
                scanner.consecutiveErrorCount++;
                
                if (scanner.consecutiveErrorCount >= scanner.maxConsecutiveErrors) {
                    // Too many consecutive errors, try to recover
                    scanner.retryCount++;
                    if (scanner.retryCount <= scanner.maxRetries) {
                        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.reconnecting + ' (' + scanner.retryCount + '/' + scanner.maxRetries + ')');
                        setTimeout(function() {
                            resumeAfterError();
                        }, 5000); // Wait 5 seconds before trying to recover
                    } else {
                        markScanAsInterrupted();
                        scanError(cadssl_scanner.strings.connection_error);
                    }
                }
            }
        });
    }
    
    /**
     * Resume scan after error or timeout
     */
    function resumeAfterError() {
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_resume_scan_from_error',
                security: cadssl_scanner.resume_scan_nonce,
                scan_id: scanner.scanId
            },
            success: function(response) {
                if (response.success) {
                    // Reset consecutive error count
                    scanner.consecutiveErrorCount = 0;
                    
                    // Process next batch from the resume offset
                    processNextBatch(response.data.resume_offset);
                } else {
                    scanner.retryCount++;
                    if (scanner.retryCount <= scanner.maxRetries) {
                        // Wait a bit before retrying
                        setTimeout(function() {
                            resumeAfterError();
                        }, 5000);
                    } else {
                        markScanAsInterrupted();
                        scanError(cadssl_scanner.strings.recovery_failed);
                    }
                }
            },
            error: function() {
                scanner.retryCount++;
                if (scanner.retryCount <= scanner.maxRetries) {
                    // Wait a bit before retrying
                    setTimeout(function() {
                        resumeAfterError();
                    }, 5000);
                } else {
                    markScanAsInterrupted();
                    scanError(cadssl_scanner.strings.recovery_failed);
                }
            }
        });
    }
    
    /**
     * Start heartbeat mechanism to monitor scan progress
     */
    function startHeartbeat() {
        // Clear any existing heartbeat
        if (scanner.heartbeatTimer) {
            clearInterval(scanner.heartbeatTimer);
        }
        
        scanner.heartbeatTimer = setInterval(function() {
            // Check if scan is still active
            if (scanner.isScanning) {
                // Check for timeout (no activity for more than processingTimeout)
                var now = Date.now();
                if (now - scanner.lastActivity > scanner.processingTimeout) {
                    // Scan appears to be stalled
                    if (scanner.retryCount < scanner.maxRetries) {
                        console.log('Scan appears to be stalled. Retrying batch...');
                        scanner.retryCount++;
                        scanner.lastActivity = now;
                        
                        // Show retry notification
                        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.retrying + ' (' + scanner.retryCount + '/' + scanner.maxRetries + ')');
                        
                        // Try to process next batch again
                        processNextBatch(scanner.scannedFiles);
                    } else {
                        // Max retries reached, mark scan as interrupted
                        markScanAsInterrupted();
                        clearInterval(scanner.heartbeatTimer);
                        scanError(cadssl_scanner.strings.scan_timeout);
                    }
                } else {
                    // Send heartbeat to keep scan session alive
                    $.ajax({
                        url: cadssl_scanner.ajax_url,
                        type: 'POST',
                        data: {
                            action: 'cadssl_scan_heartbeat',
                            security: cadssl_scanner.heartbeat_nonce,
                            scan_id: scanner.scanId
                        },
                        success: function(response) {
                            if (response.success) {
                                // Update last activity
                                scanner.lastActivity = now;
                            }
                        }
                    });
                }
            } else {
                // Scan is not active, clear heartbeat
                clearInterval(scanner.heartbeatTimer);
            }
        }, 15000); // Check every 15 seconds
    }
    
    /**
     * Mark scan as interrupted so it can be resumed later
     */
    function markScanAsInterrupted() {
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_mark_scan_interrupted',
                security: cadssl_scanner.interrupt_nonce,
                scan_id: scanner.scanId,
                scanned_files: scanner.scannedFiles,
                total_files: scanner.totalFiles,
                issues_found: scanner.issuesFound
            }
        });
    }
    
    /**
     * Process the next batch of files
     * 
     * @param {number} offset Current offset in the files array
     */
    function processNextBatch(offset) {
        if (!scanner.isScanning) {
            return;
        }
        
        // Show processing message
        $('#cadssl-scan-progress-detail').text(cadssl_scanner.strings.processing_files + ' ' + offset + ' - ' + Math.min(offset + 20, scanner.totalFiles));
        
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_process_malware_scan_batch',
                security: cadssl_scanner.process_batch_nonce,
                scan_id: scanner.scanId,
                offset: offset
            },
            success: function(response) {
                // Improved error handling - verify response structure
                if (!response || typeof response !== 'object') {
                    console.error('Invalid AJAX response', response);
                    handleBatchError(offset, 'invalid_response');
                    return;
                }

                // Update last activity timestamp
                scanner.lastActivity = Date.now();
                
                // Reset consecutive error count on success
                scanner.consecutiveErrorCount = 0;
                
                if (response.success) {
                    // Verify response data structure
                    if (!response.data) {
                        console.error('Missing response data', response);
                        handleBatchError(offset, 'missing_data');
                        return;
                    }

                    // Reset retry count on successful batch
                    scanner.retryCount = 0;
                    
                    // Update scanner state
                    scanner.scannedFiles = response.data.scanned || scanner.scannedFiles;
                    scanner.issuesFound = response.data.issues_count || scanner.issuesFound;
                    scanner.lastProcessedFile = response.data.last_file || '';
                    
                    // Update UI
                    $('#cadssl-scanned-count').text(scanner.scannedFiles);
                    $('#cadssl-issues-count').text(scanner.issuesFound);
                    
                    if (scanner.lastProcessedFile) {
                        $('#cadssl-scan-progress-detail').text(cadssl_scanner.strings.processed_file + ' ' + scanner.lastProcessedFile);
                    }
                    
                    // Update progress bar - with fallback
                    var progressPercent = response.data.completion_percent || 
                        (scanner.scannedFiles / scanner.totalFiles * 100);
                    $('.cadssl-progress-bar-inner').animate({
                        width: progressPercent + '%'
                    }, 300);
                    
                    // Check if scan is complete
                    if (response.data.status === 'completed') {
                        // Move to analyzing phase
                        updatePhaseIndicator(3);
                        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.analyzing);
                        $('#cadssl-scan-progress-detail').text('');
                        
                        // Short delay before showing results for better UX
                        setTimeout(function() {
                            updatePhaseIndicator(4);
                            $('#cadssl-scan-status-text').text(cadssl_scanner.strings.completed);
                            getScanResults();
                        }, 1500);
                    } else {
                        // Process next batch - with processing delay to avoid overwhelming server
                        setTimeout(function() {
                            processNextBatch(response.data.next_offset || (offset + response.data.processed_count || 10));
                        }, 500);
                    }
                } else {
                    // Error message is defined in response.data.message
                    var errorMessage = response.data && response.data.message ? 
                        response.data.message : cadssl_scanner.strings.error_scanning;
                    console.error('Batch processing error:', errorMessage);
                    handleBatchError(offset, 'server_error', errorMessage);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                console.error('AJAX error:', textStatus, errorThrown);
                scanner.consecutiveErrorCount++;
                handleBatchError(offset, textStatus, errorThrown);
            },
            timeout: 180000 // 3 minute timeout for batch processing
        });
    }
    
    /**
     * Handle batch processing error
     * 
     * @param {number} offset The current offset that failed
     * @param {string} errorType Type of error if available
     * @param {string} errorDetails Additional error information
     */
    function handleBatchError(offset, errorType, errorDetails) {
        console.log(`Handling batch error at offset ${offset}: ${errorType} - ${errorDetails || 'No details'}`);
        
        if (scanner.retryCount < scanner.maxRetries) {
            // Retry the batch
            scanner.retryCount++;
            
            // Show retry notification
            $('#cadssl-scan-status-text').html(errorType === 'timeout' ? 
                cadssl_scanner.strings.timeout_retrying : 
                cadssl_scanner.strings.retrying + ' (' + scanner.retryCount + '/' + scanner.maxRetries + ')');
            
            // Wait longer between retries to allow server to recover
            var retryDelay = scanner.retryCount * 5000; // Increase delay with each retry
            
            $('#cadssl-scan-progress-detail').text(cadssl_scanner.strings.retrying_in + ' ' + (retryDelay/1000) + 's...');
            
            setTimeout(function() {
                // Use a smaller batch size on retries
                if (scanner.retryCount > 1) {
                    processNextBatch(offset); // Try same offset again but it will use smaller batch
                } else {
                    processNextBatch(offset);
                }
            }, retryDelay);
        } else {
            // Max retries reached - mark scan as interrupted so it can be resumed
            markScanAsInterrupted();
            scanError(cadssl_scanner.strings.connection_error);
        }
    }
    
    /**
     * Get scan results
     */
    function getScanResults() {
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_get_scan_results',
                security: cadssl_scanner.get_results_nonce,
                scan_id: scanner.scanId
            },
            success: function(response) {
                if (response.success) {
                    // Update summary stats
                    $('#cadssl-summary-files').text(response.data.total_files);
                    $('#cadssl-summary-suspicious').text(response.data.suspicious_count);
                    $('#cadssl-summary-malware').text(response.data.malware_count);
                    
                    // Show appropriate results section
                    if (response.data.issues.length > 0) {
                        displayIssues(response.data.issues);
                        $('#cadssl-issues-found').show();
                        $('#cadssl-no-issues-found').hide();
                    } else {
                        $('#cadssl-issues-found').hide();
                        $('#cadssl-no-issues-found').show();
                    }
                    
                    // Hide progress indicator and show results
                    $('#cadssl-scan-progress-container').fadeOut(300, function() {
                        $('#cadssl-scan-results-container').fadeIn(300);
                    });
                    
                    // Re-enable scan button
                    $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', false);
                    
                    // Mark scan as complete
                    scanner.isScanning = false;
                } else {
                    // Show error
                    scanError(response.data.message || cadssl_scanner.strings.error_scanning);
                }
            },
            error: function() {
                scanError(cadssl_scanner.strings.error_scanning);
            },
            timeout: 60000 // 1 minute timeout
        });
    }
    
    /**
     * Display detected issues in the table
     * 
     * @param {Array} issues Array of detected issues
     */
    function displayIssues(issues) {
        var $issuesList = $('#cadssl-issues-list');
        $issuesList.empty();
        
        issues.forEach(function(issue) {
            var severity = getSeverityLabel(issue.severity);
            
            var $row = $('<tr></tr>');
            $row.append($('<td></td>').text(issue.filename).attr('title', issue.file));
            $row.append($('<td></td>').text(issue.type));
            $row.append($('<td></td>').append(severity));
            $row.append($('<td></td>').html(issue.details));
            
            // Action buttons
            var $actions = $('<td></td>');
            
            // Quarantine button
            var $quarantineBtn = $('<button type="button" class="button button-small cadssl-quarantine-file"></button>')
                .html('<span class="dashicons dashicons-shield"></span> ' + cadssl_scanner.strings.quarantine_file)
                .data('file', issue.file)
                .on('click', function() {
                    quarantineFile(issue.file, $(this));
                });
            
            // View file button
            var $viewBtn = $('<a class="button button-small"></a>')
                .attr('href', 'admin.php?page=cadssl-file-viewer&file=' + encodeURIComponent(issue.file))
                .html('<span class="dashicons dashicons-visibility"></span> ' + cadssl_scanner.strings.view_file);
            
            $actions.append($quarantineBtn, ' ', $viewBtn);
            $row.append($actions);
            
            $issuesList.append($row);
        });
    }
    
    /**
     * Get severity label with appropriate styling
     * 
     * @param {string} severity Severity level: high, medium, or low
     * @return {jQuery} Formatted severity label
     */
    function getSeverityLabel(severity) {
        var classes = {
            high: 'cadssl-threat-high',
            medium: 'cadssl-threat-medium',
            low: 'cadssl-threat-low'
        };
        
        var labels = {
            high: 'High Risk',
            medium: 'Medium Risk',
            low: 'Low Risk'
        };
        
        return $('<span></span>')
            .addClass('cadssl-threat-level ' + classes[severity])
            .text(labels[severity]);
    }
    
    /**
     * Quarantine a file
     * 
     * @param {string} filePath File path
     * @param {jQuery} $button Button element that triggered the action
     */
    function quarantineFile(filePath, $button) {
        // Disable button and show loading state
        $button.prop('disabled', true).html('<span class="dashicons dashicons-update cadssl-spin"></span> ' + cadssl_scanner.strings.quarantining);
        
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_quarantine_file',
                security: cadssl_scanner.quarantine_nonce,
                file: filePath
            },
            success: function(response) {
                if (response.success) {
                    // Show success message and remove row
                    showNotice('success', response.data.message);
                    $button.closest('tr').fadeOut(300, function() {
                        $(this).remove();
                        
                        // If no more issues, update UI
                        if ($('#cadssl-issues-list tr').length === 0) {
                            $('#cadssl-issues-found').hide();
                            $('#cadssl-no-issues-found').show();
                        }
                    });
                } else {
                    // Show error and reset button
                    showNotice('error', response.data.message || cadssl_scanner.strings.error_quarantine);
                    $button.prop('disabled', false).html('<span class="dashicons dashicons-shield"></span> ' + cadssl_scanner.strings.quarantine_file);
                }
            },
            error: function() {
                // Show error and reset button
                showNotice('error', cadssl_scanner.strings.error_quarantine);
                $button.prop('disabled', false).html('<span class="dashicons dashicons-shield"></span> ' + cadssl_scanner.strings.quarantine_file);
            }
        });
    }
    
    /**
     * Restore a quarantined file
     * 
     * @param {string} fileId File ID
     * @param {jQuery} $button Button element that triggered the action
     */
    function restoreFile(fileId, $button) {
        // Disable button and show loading state
        $button.prop('disabled', true).html('<span class="dashicons dashicons-update cadssl-spin"></span> ' + cadssl_scanner.strings.restoring);
        
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_restore_file',
                security: cadssl_scanner.restore_nonce,
                id: fileId
            },
            success: function(response) {
                if (response.success) {
                    // Show success message and remove row
                    showNotice('success', response.data.message);
                    $button.closest('tr').fadeOut(300, function() {
                        $(this).remove();
                    });
                } else {
                    // Show error and reset button
                    showNotice('error', response.data.message || cadssl_scanner.strings.error_restore);
                    $button.prop('disabled', false).html('<span class="dashicons dashicons-undo"></span> ' + cadssl_scanner.strings.restore_file);
                }
            },
            error: function() {
                // Show error and reset button
                showNotice('error', cadssl_scanner.strings.error_restore);
                $button.prop('disabled', false).html('<span class="dashicons dashicons-undo"></span> ' + cadssl_scanner.strings.restore_file);
            }
        });
    }
    
    /**
     * Cancel the scan
     */
    function cancelScan() {
        scanner.isScanning = false;
        
        // Hide progress container
        $('#cadssl-scan-progress-container').fadeOut(300);
        
        // Re-enable scan buttons
        $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', false);
        
        // Show notice
        showNotice('info', 'Scan canceled.');
    }
    
    /**
     * Handle scan error
     * 
     * @param {string} message Error message
     */
    function scanError(message) {
        // Mark scan as stopped
        scanner.isScanning = false;
        
        // Re-enable scan buttons
        $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', false);
        
        // Show error message
        showNotice('error', message);
        
        // Hide progress spinner
        $('.cadssl-spinner-container').removeClass('active');
    }
    
    /**
     * Update phase indicator to show current scan phase
     * 
     * @param {number} phase Phase number (1-4)
     */
    function updatePhaseIndicator(phase) {
        scanner.currentPhase = phase;
        
        // Remove active class from all phases
        $('.cadssl-scan-phase').removeClass('cadssl-phase-active cadssl-phase-completed');
        
        // Mark completed phases
        for (var i = 1; i < phase; i++) {
            $('#cadssl-phase-' + i).addClass('cadssl-phase-completed');
        }
        
        // Mark current phase as active
        $('#cadssl-phase-' + phase).addClass('cadssl-phase-active');
    }
    
    /**
     * Initialize animated icons
     */
    function initIconAnimations() {
        // Set up pulsing effect for icons
        setInterval(function() {
            $('.cadssl-icon-search, .cadssl-icon-lock, .cadssl-icon-clock').toggleClass('cadssl-icon-pulse');
        }, 2000);
    }
    
    /**
     * Download scan report as text file
     */
    function downloadReport() {
        // Create content for the report
        var content = "CADSSL Security Malware Scan Report\n";
        content += "===============================\n\n";
        content += "Date: " + new Date().toLocaleString() + "\n";
        content += "Files Scanned: " + $('#cadssl-summary-files').text() + "\n";
        content += "Suspicious Files: " + $('#cadssl-summary-suspicious').text() + "\n";
        content += "Malware Detected: " + $('#cadssl-summary-malware').text() + "\n\n";
        
        // Add detected issues
        if ($('#cadssl-issues-found').is(':visible')) {
            content += "DETECTED ISSUES:\n";
            content += "===============\n\n";
            
            $('#cadssl-issues-table tbody tr').each(function() {
                var $columns = $(this).find('td');
                content += "File: " + $columns.eq(0).attr('title') + "\n";
                content += "Type: " + $columns.eq(1).text() + "\n";
                content += "Severity: " + $columns.eq(2).text() + "\n";
                content += "Details: " + $columns.eq(3).text() + "\n\n";
            });
        } else {
            content += "No malware issues were detected.";
        }
        
        // Create file and trigger download
        var blob = new Blob([content], {type: 'text/plain'});
        var url = window.URL.createObjectURL(blob);
        
        var a = document.createElement('a');
        a.href = url;
        a.download = 'cadssl_malware_scan_report_' + new Date().toISOString().slice(0,10) + '.txt';
        document.body.appendChild(a);
        a.click();
        
        // Cleanup
        setTimeout(function() {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 100);
    }
    
    /**
     * Show notice to the user
     * 
     * @param {string} type Notice type: 'error', 'success', 'warning', 'info'
     * @param {string} message The message text
     */
    function showNotice(type, message) {
        // Remove any existing notices
        $('.cadssl-notice').remove();
        
        // Create notice
        var $notice = $('<div class="notice notice-' + type + ' is-dismissible cadssl-notice"><p>' + message + '</p></div>')
            .hide()
            .prependTo('.cadssl-malware-scanner-page')
            .slideDown();
        
        // Add dismiss button functionality
        $notice.append(
            $('<button type="button" class="notice-dismiss"></button>')
                .on('click', function() {
                    $notice.slideUp(function() { $(this).remove(); });
                })
        );
        
        // Auto-dismiss after 5 seconds
        setTimeout(function() {
            $notice.slideUp(function() { $(this).remove(); });
        }, 5000);
    }

    // Add these new functions to support background scanning

    /**
     * Start a background scan process
     * This initiates a scan that will continue in the background even if the browser is closed
     */
    function startBackgroundScan() {
        // Reset scanner state
        scanner = {
            scanId: null,
            totalFiles: 0,
            scannedFiles: 0,
            issuesFound: 0,
            isScanning: true,
            currentPhase: 1,
            lastActivity: Date.now(),
            statusPollingTimer: null,
            liveStatusLines: []
        };
        
        // Show scan container and hide any results
        $('#cadssl-scan-results-container').hide();
        $('#cadssl-scan-progress-container').fadeIn(300);
        
        // Add background mode class
        $('#cadssl-scan-progress-container').addClass('bg-mode');
        
        // Disable scan buttons
        $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', true);
        
        // Update UI text
        $('#cadssl-scan-status-text').text(cadssl_scanner.strings.preparing);
        $('#cadssl-scanned-count').text('0');
        $('#cadssl-issues-count').text('0');
        
        // Set first phase active
        updatePhaseIndicator(1);
        
        // Show preparing animation
        $('.cadssl-spinner-container').addClass('active');
        
        // Reset progress bar
        $('.cadssl-progress-bar-inner').css('width', '0%');
        
        // Add explanatory message about background scanning
        if (!$('#cadssl-background-scan-notice').length) {
            var $notice = $('<div id="cadssl-background-scan-notice" class="cadssl-bg-scan-info"></div>')
                .append('<strong><span class="cadssl-bg-active-indicator"></span>' + cadssl_scanner.strings.background_scanning + '</strong>')
                .append('<p>' + cadssl_scanner.strings.background_scan_explanation + '</p>')
                .append('<p>' + cadssl_scanner.strings.check_back_later + '</p>')
                .append('<div class="cadssl-refresh-status" title="Refresh scan status"><span class="dashicons dashicons-update"></span></div>');
            
            $('#cadssl-scan-progress-container .cadssl-card-body').prepend($notice);
            
            // Initialize the refresh button
            $('.cadssl-refresh-status').on('click', function() {
                var $refreshBtn = $(this);
                $refreshBtn.addClass('spin');
                
                // Force an immediate status update
                updateBackgroundScanStatus(true, function() {
                    // Remove spin class after update completes
                    setTimeout(function() {
                        $refreshBtn.removeClass('spin');
                    }, 500);
                });
            });
        }
        
        // Add live status container
        if (!$('#cadssl-scan-live-status').length) {
            $('<div id="cadssl-scan-live-status" class="cadssl-scan-live-status"></div>')
                .appendTo('#cadssl-scan-progress-container .cadssl-card-body');
        }
        
        // Initiate background scan via AJAX
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_start_background_scan',
                security: cadssl_scanner.start_background_scan_nonce
            },
            success: function(response) {
                if (response.success) {
                    // Update scanner state
                    scanner.scanId = response.data.scan_id;
                    scanner.totalFiles = response.data.total_files;
                    scanner.lastActivity = Date.now();
                    
                    // Update UI
                    updatePhaseIndicator(2);
                    $('#cadssl-scan-status-text').html(
                        cadssl_scanner.strings.scanning +
                        '<span class="cadssl-status-badge cadssl-status-active">' + 
                        cadssl_scanner.strings.active + 
                        '</span>'
                    );
                    
                    // Add scan status line
                    addStatusLine(cadssl_scanner.strings.background_scan_started);
                    
                    // Start polling for updates
                    startBackgroundStatusPolling();
                    
                    // Show notice
                    showNotice('info', cadssl_scanner.strings.background_scan_started);
                    
                    // Add stop scan button if it doesn't exist
                    if (!$('#cadssl-stop-bg-scan').length) {
                        $('<button type="button" id="cadssl-stop-bg-scan" class="button button-secondary"></button>')
                            .html('<span class="dashicons dashicons-no"></span> ' + cadssl_scanner.strings.stop_scan)
                            .data('scan-id', scanner.scanId)
                            .appendTo('.cadssl-scan-controls');
                    }
                } else {
                    // Show error
                    scanError(response.data.message || cadssl_scanner.strings.error_scanning);
                }
            },
            error: function() {
                scanError(cadssl_scanner.strings.error_scanning);
            }
        });
    }

    /**
     * Add a status line to the live status container
     * 
     * @param {string} message Status message to display
     */
    function addStatusLine(message) {
        var now = new Date();
        var timestamp = now.toLocaleTimeString();
        var line = '[' + timestamp + '] ' + message;
        
        scanner.liveStatusLines.push(line);
        
        // Keep only last 10 lines
        if (scanner.liveStatusLines.length > 10) {
            scanner.liveStatusLines.shift();
        }
        
        // Update status container
        var $statusContainer = $('#cadssl-scan-live-status');
        if ($statusContainer.length) {
            $statusContainer.html('');
            
            scanner.liveStatusLines.forEach(function(statusLine) {
                $statusContainer.append($('<div></div>').text(statusLine));
            });
            
            // Scroll to bottom
            $statusContainer.scrollTop($statusContainer[0].scrollHeight);
        }
    }

    /**
     * Start polling for background scan status with improved error handling
     */
    function startBackgroundStatusPolling() {
        // Clear any existing interval
        if (scanner.statusPollingTimer) {
            clearInterval(scanner.statusPollingTimer);
        }
        
        // Update immediately
        updateBackgroundScanStatus();
        
        // Then set up polling every 5 seconds - increased from 3 to reduce server load
        scanner.statusPollingTimer = setInterval(function() {
            if (scanner.isScanning && scanner.scanId) {
                updateBackgroundScanStatus();
            } else {
                clearInterval(scanner.statusPollingTimer);
            }
        }, 5000);
    }

    /**
     * Update background scan status with robust error handling
     * 
     * @param {boolean} forceUpdate Force immediate update
     * @param {function} callback Optional callback after update
     */
    function updateBackgroundScanStatus(forceUpdate, callback) {
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_get_background_scan_status',
                security: cadssl_scanner.get_background_status_nonce,
                scan_id: scanner.scanId,
                force_update: forceUpdate ? 1 : 0
            },
            success: function(response) {
                if (response.success) {
                    // Update scanner state with latest data
                    scanner.scannedFiles = response.data.scanned_files;
                    scanner.issuesFound = response.data.issues_count;
                    scanner.lastActivity = Date.now();
                    
                    // Update UI
                    $('#cadssl-scanned-count').text(scanner.scannedFiles);
                    $('#cadssl-issues-count').text(scanner.issuesFound);
                    
                    // Show current file being processed
                    if (response.data.current_file) {
                        var currentFile = response.data.current_file;
                        $('#cadssl-scan-progress-detail').text(cadssl_scanner.strings.processing_file + ' ' + currentFile);
                        
                        // Add to status log if the file has changed
                        if (scanner.lastProcessedFile !== currentFile) {
                            scanner.lastProcessedFile = currentFile;
                            addStatusLine(cadssl_scanner.strings.processing_file + ' ' + currentFile);
                        }
                    }
                    
                    // Update progress bar with smoother animation
                    $('.cadssl-progress-bar-inner').animate({
                        width: response.data.progress + '%'
                    }, 400);
                    
                    // Calculate estimated time remaining
                    if (response.data.elapsed_time > 0 && response.data.progress > 0) {
                        var secondsRemaining = Math.round((100 - response.data.progress) * response.data.elapsed_time / response.data.progress);
                        var minutesRemaining = Math.floor(secondsRemaining / 60);
                        var secondsDisplay = secondsRemaining % 60;
                        
                        var timeMsg = cadssl_scanner.strings.time_remaining + ' ';
                        if (minutesRemaining > 0) {
                            timeMsg += minutesRemaining + ' ' + cadssl_scanner.strings.minutes + ' ';
                        }
                        timeMsg += secondsDisplay + ' ' + cadssl_scanner.strings.seconds;
                        
                        // Check if there's already a time estimate element
                        if ($('#cadssl-scan-time-estimate').length) {
                            $('#cadssl-scan-time-estimate').text(timeMsg);
                        } else {
                            $('<div id="cadssl-scan-time-estimate" class="cadssl-time-estimate"></div>')
                                .text(timeMsg)
                                .appendTo('#cadssl-scan-progress-detail').hide().fadeIn();
                        }
                    }
                    
                    // Check scan status
                    if (response.data.status === 'completed') {
                        // Scan is complete, show results
                        scanner.isScanning = false;
                        clearInterval(scanner.statusPollingTimer);
                        
                        // Update UI
                        updatePhaseIndicator(4);
                        $('#cadssl-scan-status-text').html(
                            cadssl_scanner.strings.completed +
                            '<span class="cadssl-status-badge cadssl-status-completed">' + 
                            cadssl_scanner.strings.completed.toUpperCase() + 
                            '</span>'
                        );
                        
                        // Add status line
                        addStatusLine(cadssl_scanner.strings.background_scan_completed);
                        
                        // Redirect to results page
                        if (response.data.results_url) {
                            // Show completed message
                            $('#cadssl-scan-progress-detail').html(
                                cadssl_scanner.strings.background_scan_completed + 
                                '<br><br><a href="' + response.data.results_url + '" class="button button-primary">' +
                                '<span class="dashicons dashicons-visibility"></span> ' +
                                cadssl_scanner.strings.view_results + '</a>'
                            );
                            
                            // Enable scan button again
                            $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', false);
                            $('#cadssl-stop-bg-scan').remove();
                        } else {
                            getScanResults();
                        }
                    } else if (response.data.status === 'stopped') {
                        // Scan was stopped
                        scanner.isScanning = false;
                        clearInterval(scanner.statusPollingTimer);
                        
                        // Show notice
                        showNotice('warning', cadssl_scanner.strings.background_scan_stopped);
                        addStatusLine(cadssl_scanner.strings.background_scan_stopped);
                        
                        // Update status badge
                        $('#cadssl-scan-status-text').html(
                            cadssl_scanner.strings.scanning +
                            '<span class="cadssl-status-badge cadssl-status-paused">' + 
                            cadssl_scanner.strings.stopped + 
                            '</span>'
                        );
                        
                        // Re-enable scan button
                        $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', false);
                    } else if (response.data.status === 'error') {
                        // Scan encountered an error
                        scanner.isScanning = false;
                        clearInterval(scanner.statusPollingTimer);
                        
                        // Show error
                        scanError(cadssl_scanner.strings.error_scanning);
                        addStatusLine(cadssl_scanner.strings.error_scanning);
                    } else if (!response.data.is_active && response.data.status !== 'completed') {
                        // Scan appears to be stalled - warn but continue polling
                        $('#cadssl-scan-status-text').html(
                            cadssl_scanner.strings.reconnecting +
                            '<span class="cadssl-status-badge cadssl-status-paused">' + 
                            cadssl_scanner.strings.reconnecting + 
                            '</span>'
                        );
                        addStatusLine(cadssl_scanner.strings.reconnecting);
                    }
                    
                    // Check if scan has new warnings
                    if (response.data.warnings && response.data.warnings.length > 0) {
                        response.data.warnings.forEach(function(warning) {
                            addStatusLine('WARNING: ' + warning);
                        });
                    }
                    
                    // Run callback if provided
                    if (typeof callback === 'function') {
                        callback(response);
                    }
                }
            },
            error: function(xhr, status, error) {
                // Connection error - log but continue polling
                console.error('Error fetching background scan status:', status, error);
                
                // Add to status log
                addStatusLine('Connection error: ' + status);
                
                // Run callback if provided
                if (typeof callback === 'function') {
                    callback(null, error);
                }
            }
        });
    }

    // Update the startScan function to use background mode when the flag is set
    $(document).ready(function() {
        // Always use background scanning - remove conditional
        $('#cadssl-start-scan').on('click', function() {
            startBackgroundScan();
        });
        
        // Hook up the stop background scan button with enhanced delegation
        $(document).on('click', '#cadssl-stop-bg-scan', function() {
            var scanId = $(this).data('scan-id');
            stopBackgroundScan(scanId);
        });
    });

    /**
     * Stop a background scan
     * 
     * @param {string} scanId ID of the scan to stop
     */
    function stopBackgroundScan(scanId) {
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_stop_background_scan',
                security: cadssl_scanner.stop_background_scan_nonce,
                scan_id: scanId
            },
            success: function(response) {
                if (response.success) {
                    // Show notice
                    showNotice('info', cadssl_scanner.strings.background_scan_stopped);
                    
                    // Re-enable scan buttons
                    $('#cadssl-start-scan, #cadssl-rescan').prop('disabled', false);
                    
                    // Hide progress container
                    $('#cadssl-scan-progress-container').fadeOut(300);
                    
                    // Reset scanner state
                    scanner.isScanning = false;
                    clearInterval(scanner.statusPollingTimer);
                }
            }
        });
    }

    /**
     * Force release a potentially stuck scan lock
     */
    function forceReleaseScanLock() {
        // Show releasing indicator
        $('#cadssl-releasing-lock').show();
        $('#cadssl-force-release-lock').prop('disabled', true);
        
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            data: {
                action: 'cadssl_force_release_scan_lock',
                security: cadssl_scanner.force_release_lock_nonce
            },
            success: function(response) {
                if (response.success) {
                    // Hide the lock notice
                    $('.cadssl-scan-lock-notice').slideUp(300, function() {
                        $(this).remove();
                    });
                    
                    // Show success message
                    showNotice('success', cadssl_scanner.strings.lock_released);
                } else {
                    // Show error
                    showNotice('error', response.data.message || 'Error releasing lock');
                }
            },
            error: function() {
                // Show error
                showNotice('error', 'Server error while trying to release lock');
                
                // Reset UI
                $('#cadssl-releasing-lock').hide();
                $('#cadssl-force-release-lock').prop('disabled', false);
            },
            complete: function() {
                // Hide releasing indicator
                $('#cadssl-releasing-lock').hide();
                $('#cadssl-force-release-lock').prop('disabled', false);
            }
        });
    }
    
})(jQuery);

jQuery(document).ready(function($) {
    // Background scan status variables
    let bgStatusCheckTimer;
    let bgIsRefreshing = false;
    let bgCurrentScanId = null;
    const bgRefreshInterval = 5000; // 5 seconds
    const bgMaxRetries = 3;
    let bgRetryCount = 0;
    let bgLastUpdate = 0;
    
    // Check for active background scan
    if ($('#cadssl-bg-progress-bar').length) {
        bgCurrentScanId = $('#cadssl-stop-bg-scan').data('scan-id');
        startBackgroundStatusChecks();
    }
    
    // Start the background status check loop
    function startBackgroundStatusChecks() {
        if (bgCurrentScanId) {
            checkBackgroundScanStatus();
            bgStatusCheckTimer = setInterval(checkBackgroundScanStatus, bgRefreshInterval);
        }
    }
    
    // Stop background status checks
    function stopBackgroundStatusChecks() {
        if (bgStatusCheckTimer) {
            clearInterval(bgStatusCheckTimer);
            bgStatusCheckTimer = null;
        }
    }
    
    // Update the last updated time display
    function updateLastUpdatedTime() {
        bgLastUpdate = Date.now();
        const timeStr = new Date().toLocaleTimeString();
        $('#cadssl-bg-last-updated').text(cadssl_scanner.strings.last_update + ' ' + timeStr);
    }
    
    // Check background scan status
    function checkBackgroundScanStatus() {
        if (bgIsRefreshing || !bgCurrentScanId) return;
        
        bgIsRefreshing = true;
        
        $.ajax({
            url: cadssl_scanner.ajax_url,
            type: 'POST',
            dataType: 'json',
            data: {
                action: 'cadssl_get_background_scan_status',
                security: cadssl_scanner.get_background_status_nonce,
                scan_id: bgCurrentScanId,
                force_update: (bgRetryCount >= bgMaxRetries) ? 1 : 0 // Force update if retried too many times
            },
            success: function(response) {
                bgIsRefreshing = false;
                
                if (response.success) {
                    // Reset retry counter on success
                    bgRetryCount = 0;
                    
                    const data = response.data;
                    
                    // Update last updated timestamp display
                    updateLastUpdatedTime();
                    
                    // Update progress bar
                    $('#cadssl-bg-progress-bar .cadssl-progress-bar-inner').css('width', data.progress + '%');
                    
                    // Update scan stats
                    $('#cadssl-bg-scanned-count').text(data.scanned_files);
                    $('#cadssl-bg-issues-count').text(data.issues_count);
                    
                    // Update status text
                    let statusText = cadssl_scanner.strings.scanning;
                    if (data.status === 'completed') {
                        statusText = cadssl_scanner.strings.completed;
                        
                        // Show view results button if completed
                        if (data.results_url && !$('#cadssl-view-results-btn').length) {
                            const viewButton = $('<a href="' + data.results_url + '" class="button button-primary" id="cadssl-view-results-btn"><span class="dashicons dashicons-visibility"></span>' + cadssl_scanner.strings.view_results + '</a>');
                            $('#cadssl-stop-bg-scan').after(viewButton);
                            
                            // Stop status checks when completed
                            stopBackgroundStatusChecks();
                        }
                    } else if (data.status === 'error') {
                        statusText = cadssl_scanner.strings.error_scanning;
                    } else if (data.status === 'stopped') {
                        statusText = cadssl_scanner.strings.background_scan_stopped;
                        // Stop status checks when stopped
                        stopBackgroundStatusChecks();
                    } else if (data.status === 'restarting') {
                        statusText = cadssl_scanner.strings.reconnecting;
                    }
                    
                    // Add status indicator
                    let statusIndicator = '';
                    if (data.is_active) {
                        statusIndicator = '<span class="cadssl-status-indicator active">' + cadssl_scanner.strings.active + '</span>';
                    } else if (data.status !== 'completed' && data.status !== 'stopped') {
                        statusIndicator = '<span class="cadssl-status-indicator inactive">' + cadssl_scanner.strings.reconnecting + '</span>';
                    }
                    
                    $('#cadssl-bg-scan-status-text').html(statusText + ' ' + statusIndicator);
                    
                    // Update current file display
                    if (data.current_file) {
                        $('#cadssl-bg-scan-progress-detail').text(cadssl_scanner.strings.processing_files + ': ' + data.current_file);
                    } else {
                        $('#cadssl-bg-scan-progress-detail').text('');
                    }
                    
                    // Update time estimate
                    if (data.elapsed_time > 0 && data.progress > 0 && data.status !== 'completed') {
                        const totalEstimatedTime = (data.elapsed_time / data.progress) * 100;
                        const remainingTime = Math.max(0, totalEstimatedTime - data.elapsed_time);
                        const minutes = Math.floor(remainingTime / 60);
                        const seconds = Math.round(remainingTime % 60);
                        
                        let timeStr = cadssl_scanner.strings.time_remaining + ' ';
                        if (minutes > 0) {
                            timeStr += minutes + ' ' + cadssl_scanner.strings.minutes + ' ';
                        }
                        timeStr += seconds + ' ' + cadssl_scanner.strings.seconds;
                        
                        $('#cadssl-bg-time-estimate').text(timeStr);
                    }
                } else {
                    // Increment retry counter on failure
                    bgRetryCount++;
                    
                    // If too many retries, try a forced refresh
                    if (bgRetryCount >= bgMaxRetries) {
                        $('#cadssl-bg-scan-status-text').html(cadssl_scanner.strings.reconnecting + 
                            ' <span class="cadssl-status-indicator error">Error</span>');
                    }
                }
            },
            error: function() {
                bgIsRefreshing = false;
                bgRetryCount++;
                
                // Show reconnecting message with retry count
                if (bgRetryCount < bgMaxRetries) {
                    $('#cadssl-bg-scan-status-text').html(cadssl_scanner.strings.reconnecting + 
                        ' <span class="cadssl-status-indicator inactive">Retry ' + bgRetryCount + '/' + bgMaxRetries + '</span>');
                } else {
                    // Add a force refresh button after max retries
                    if (!$('#cadssl-force-refresh').length) {
                        $('#cadssl-bg-scan-status-text').after(
                            '<div class="cadssl-refresh-controls">' +
                            '<button id="cadssl-force-refresh" class="button button-secondary">' +
                            '<span class="dashicons dashicons-update"></span> ' + 
                            cadssl_scanner.strings.refresh_status + '</button></div>'
                        );
                        
                        // Add click handler
                        $('#cadssl-force-refresh').on('click', function() {
                            bgRetryCount = 0;
                            $(this).prop('disabled', true).find('.dashicons').addClass('spin');
                            checkBackgroundScanStatus();
                            setTimeout(function() {
                                $('#cadssl-force-refresh').prop('disabled', false).find('.dashicons').removeClass('spin');
                            }, 2000);
                        });
                    }
                }
            },
            complete: function() {
                bgIsRefreshing = false;
            }
        });
    }
});
